----------------------------------------------------------------------------------------------------

:: PROGRAM : svn_process.bat
::----------------------------
:: @echo off

D:

cd D:\_KANG\KANG_20160219\SVN_REPOS\TEMP

:: svn list svn://tain.iptime.org:13690/REPO_ZIP

rmdir /S /Q SASEMARTCMS
svn export svn://matcmsmine01/repo-tasks/SASEMARTCMS

:: pause
:: TIMEOUT 2

----------------------------------------------------------------------------------------------------

%% 파일 삭제하기 - delrcv.bat %%

	@IF '%1'=='' GOTO USAGE
	@IF '%2'=='' GOTO USAGE
	@FOR /R %1 %%1 IN (%2) DO DEL /S /Q "%%1"
	@PAUSE 
	GOTO END
	
	:USAGE
	@ECHO delrcv[시작폴더위치] [파일명]
	
	:END

- 사용법 delrcv [시작폴더위치] [파일명]
      ex> delrcv . *.bak

%% 폴더 삭제하기 - rmrcv.bat %%

	@IF '%1'=='' GOTO USAGE
	@IF '%2'=='' GOTO USAGE
	@FOR /R %1 %%1 IN (%2) DO RMDIR /S /Q "%%1"
	@PAUSE 
	GOTO END
	
	:USAGE
	@ECHO rmrcv [시작폴더위치] [폴더명]
	
	:END

- 사용법 rmrcv [시작폴더위치] [폴더명]
      ex> rmrcv . .svn
[출처] DOS 하위폴더까지 특정 파일 / 폴더 삭제하기|작성자 kalpalov

----------------------------------------------------------------------------------------------------
[ 네트웍 드라이브 ]

    (x) > subst E:     \\10.150.252.70\201506_스템구축

    net use \\IP\IPC$ 패스워드 /USER:아이디
    (o) > net use \\10.150.252.70\201506_시스템구축 file123 /USER:file

        192.168.253.13, ID가 Admin, 패스워드가 1234 일 때 다음과 같습니다.
        -> net use \\192.168.253.13\IPC$ 1234 /USER:Admin

----------------------------------------------------------------------------------------------------
[ 레지스트 변경 ]

    > cmd /c reg add HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\system /v LocalAccountTokenFilterPolicy /t REG_DWORD /d 1 /f
        HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\system\ 에서 오른쪽 클릭 > 새로 만들기 > DWORD(32bit) 클릭하여 값을 만든 후,
        이름을 LocalAccountTokenFilterPolicy 로 정하고 값을 1로 세팅합니다.


----------------------------------------------------------------------------------------------------
[ 원격 서버 종료 ]

    > shutdown -s -t 시간초 -m \\IP

    IP가 192.168.253.13, 시간초를 30000 이라고 할 때 다음과 같습니다.
    > shutdown -s -t 30000 -m \\192.168.253.13




----------------------------------------------------------------------------------------------------
[ 이클립스 환경 ]

    개발 : eclipse luna 32bit jdk 1.7.0_45 32bit

    D:\PROJ\PROG\eclipse_mars\eclipse.exe -vm "D:\PROJ\PROG\jdk1.8.0_60\bin\javaw.exe" -data "D:\PROJ\WORK\workspace_mars"

    N:\tools\eclipse\eclipse.exe -vm N:\tools\jdk\jdk1.7.0_45\bin\javaw.exe -data N:\workspace

    Project 선택 > Properties > Project Facets > Java Version 확인

    subst N: .

    set KANG_DRIVE=K:    -> %KANG_DRIVE%

    K:\PROG\eclipse\eclipse_mars\eclipse.exe -vm "K:\PROG\jdk\jdk1.8.0_60\bin\javaw.exe" -data "K:\WORK\workspace_mars" -showlocation "제목표시줄(타이틀바)"
        -Xverify:none -XX+UseParallelGC -XXPermSize=20M -XXMaxNewSize=32M -XXNewSize=32M -vmargs -Xms512m -Xmx1024m


----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------

01,03,05,07,09,11,13,15,17,19,21,23,25,27,29,31,33,35,37,39,41,43,45,47,49,51,53,55,57,59 * * * * sshpass -p saspw94\!\@ scp -r sas@app02:/sas/sasv94/config/Lev1/Web/WebAppServer/SASServer_/sas_webapps/sas.war/mfile /sas/sasv94/config/Lev1/Web/WebAppServer/SASServer_/sas_webapps/sas.war/ > /dev/null
01,03,05,07,09,11,13,15,17,19,21,23,25,27,29,31,33,35,37,39,41,43,45,47,49,51,53,55,57,59 * * * * sshpass -p saspw94\!\@ scp -r sas@app02:/sas/sasv94/config/Lev1/Web/WebAppServer/SASServer_/sas_webapps/sas.war/bfile /sas/sasv94/config/Lev1/Web/WebAppServer/SASServer_/sas_webapps/sas.war/ > /dev/null

----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
[ SVN 위치 ]

    Server

        svn://mine01/repo-tasks

    Server 종료 / 실행

        $ ps -ef | grep svnserv
        $ svnserve -d -r /sas/svn


    Client

        SVN : Subclipse 1.10.10    other : Subversion - SVN Team Provider 3.0.0


    /sas/svn/repo-tasks

    /sas/svn/repo-tasks/conf/passwd

        ### This file is an example password file for svnserve.
        ### Its format is similar to that of svnserve.conf. As shown in the
        ### example below it contains one section labelled [users].
        ### The name and password for each user follow, one account per line.

        [users]
        # harry = harryssecret
        # sally = sallyssecret
        jenkins = Jen4$$$123
        fic01524=Kang123!


    확인1 : http://pyrasis.com/book/WindowsProjectEssentialUtility/Chapter01
    확인2 : http://pyrasis.com/book/WindowsProjectEssentialUtility/Chapter02#section-1






----------------------------------------------------------------------------------------------------
[ CI 위치 ]

    Server 종료 / 실행

        $ cd /sas/jenkins/apache-tomcat-7.0.63/bin

        $ ./catalina.sh stop

        $ ./catalina.sh start

    /sas/jenkins/apache-tomcat-7.0.63

    http://matcmsmine01:8080/jenkins/    :   sas/saspw94!@

----------------------------------------------------------------------------------------------------
[ 쓸모없는 메일 삭제 ]

    cat /dev/null > /var/spool/mail/[계정]


----------------------------------------------------------------------------------------------------
[ Jenkins ]

        /sas/sasuser/sas/.jenkins/jobs/EmartCMSDevDeploy/workspace/SASEMARTCMS

    설치
        $ sudo wget -O /etc/yum.repos.d/jenkins.repo http://pkg.jenkins-ci.org/redhat/jenkins.repo

        .....

        $ sudo rpm --import http://pkg.jenkins-ci.org/redhat/jenkins-ci.org.key
        $ sudo yum install jenkins

        .....

        $ sudo service jenkins start              <- Jenkins를 구동한다.

        /etc/sysconfig/jenkins 파일의 JENKINS_PORT = "8080" 부분을 수정한다.

        $ sudo chkconfig jenkins on                <- Jenkins가 자동으로 시작하도록 서비스 등록


    제공하는 기능

        - 미려한 웹 인터페이스를 통한 간편한 설정
        - 강력하고 편리한 레포팅 기능
        - 지속적인 자동화 빌드
        - 지속적인 자동화 테스트
        - 커버리지 감시
        - 코드 품질 감시
        - 다양한 인증기반과 결합한 인증 및 권한관리 기능
        - Groovy script를 이용한 고수준의 잡 스케줄링 기능
        - 커맨드라인 인터페이스 제공
        - 자동화된 배포 관리
        - 분산빌드 기능
        - 윈도우 커맨드 스케줄링 실행기능

        이 외에도 수많은 플러그인을 통해 간단히 기능을 추가/확장 할 수 있다.

    설치파일 다운로드

        http://jenkins-ci.org/ 사이트에서 jenkins.war 파일을 다운로드 한다.

        > java -jar jenkins.war

        > sc delete jenkins

    Jenkins 설치 및 구동하기

        # Debian/Ubuntu 환경에서 설치

        # jenkins 접속 키 추가
        wget -q -O - http://pkg.jenkins-ci.org/debian/jenkins-ci.org.key | sudo apt-key add -

        # jenkins 저장소 위치 추가
        sudo sh -c 'echo deb http://pkg.jenkins-ci.org/debian binary/ > /etc/apt/sources.list.d/jenkins.list'

        # apt-get 갱신
        sudo apt-get update

        # jenkins 설치
        sudo apt-get install jenkins

        # jenkins.war 위치 파악
        dpkg -L jenkins

        # 수동으로 jenkins 구동
        java -jar /usr/share/jenkins/jenkins.war

        # 8080 포트를 이미 다른 프로세스가 사용하고 있다면 다음과 같은 에러 발생
        Caused by: java.io.IOException: Failed to listen on port 8080

        # 다른 포트를 사용하여 구동
        java -jar /usr/share/jenkins/jenkins.war --httpPort=8888

        # 리눅스 서비스로 등록하여 구동
        sudo service jenkins start

        # 또는 기본 포트 변경하고 구동
        sudo vi /etc/default/jenkins
        HTTP_PORT=8080

        # 접속해 보기
        http://127.0.0.1:8080





        set JAVA_HOME=D:\Java\jdk1.6

        cd "D:\Java\Tomcat 6"
        cmd /c bin\shutdown.bat
        timeout 5
        cmd /c bin\startup.bat


        $ java -jar jenkins.war --httpPort=8888



----------------------------------------------------------------------------------------------------

1. Eclipse > SASEMARTCMS(우클릭) > Team > Synchronize with Repository
2. SVN > Update
3. Pom.xml(우클릭) > Run As > Maven Clean
4. 상단메뉴 > Project > Clean > Clean All Project > OK
5. Pom.xml(우클릭) > Run As > Maven Install
6. SASEMARTCMS > target > EmartCampaign-1.0.0 을 확인한다.

----------------------------------------------------------------------------------------------------

1 도스 명령어
    1.1 APPEND
    1.2 ASSIGN
    1.3 ATTRIB
    1.4 BACKUP, RESTORE
    1.5 BASIC, BASICA
    1.6 CALL
    1.7 CD, CHDIR
    1.8 CHCP
    1.9 CHKDSK
    1.10 CHOICE
    1.11 CLS
    1.12 COPY
    1.13 CTTY
    1.14 DATE
    1.15 DEFRAG
    1.16 DEL, ERASE
    1.17 DELTREE
    1.18 DIR
    1.19 ECHO
    1.20 EDIT
    1.21 EDLIN
    1.22 EXE2BIN
    1.23 EXIT
    1.24 FASTOPEN
    1.25 FC, COMP
    1.26 FDISK
    1.27 FIND
    1.28 FOR
    1.29 FORMAT
    1.30 HELP
    1.31 INTERSVR, INTERLINK
    1.32 JOIN
    1.33 LABEL
    1.34 LOADFIX
    1.35 LOADHIGH, LH
    1.36 MD, MKDIR
    1.37 MEM
    1.38 MEMMAKER
    1.39 MODE
    1.40 MORE
    1.41 MOVE
    1.42 MSD
    1.43 PATH
    1.44 PAUSE
    1.45 PRINT
    1.46 RD, RMDIR
    1.47 RECOVER
    1.48 REM
    1.49 REN
    1.50 SCANDISK
    1.51 SET
    1.52 SETVER
    1.53 SHARE
    1.54 SMARTDRIVE
    1.55 SORT
    1.56 SUBST
    1.57 SYS
    1.58 TIME
    1.59 TREE
    1.60 TRUENAME
    1.61 TYPE
    1.62 UNDELTEE
    1.63 VER
    1.64 VERIFY
    1.65 XCOPY

----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------

[ PC 세팅 ]

    1. 환경변수 세팅 : 컴퓨터 > 속성

        시스템 변수

            WORK_DRIVE=K:
            JAVA_HOME=       <- 변경가능

        사용자 변수

            PATH=%PATH%;%JAVA_HOME%\bin

    2. jenkins 설치

        jenkins-1.631.zip 파일을 압축풀어서 setup.exe 파일을 실행한다.

    3. SVN (Subversion) 설치

        Setup-Subversion-1.6.6.msi 파일을 실행한다.

        SVN Manager Tool  : SVNManager-1.1.2-Setup.msi             <- 별로
        Eclipse Plugin    : Eclipse Subversion site-1.10.10.zip
        Subversion Client : TortoiseSVN-1.9.2.26806-x64-svn-1.9.2.msi
        Subversion SRC    : subversion_src-1.9.2.zip

    4. Maven을 설치한다.

        apache-maven-3.3.3-bin.zip 파일을 특정위치에 압축을 풀어서 사용한다.

    5. 설치 프로그램 확인-1 : 폴더확인

        C:\Program Files (x86)\jenkins
        C:\Program Files (x86)\Subversion

    6. 설치 프로그램 확인-2 : 제어판 > 프로그램

        Jenkins 1.631
        Subversion

    7. 설치 프로그램 확인-3 : 서비스 확인 : 컴퓨터 > 관리 > 서비스

        > sc qc     jenkins
        > sc query  jenkins
        > sc start  jenkins
        > sc stop   jenkins
        > sc delete jenkins

        서비스에는 driver/service 두 종류가 있다.

        > sc query               | more
        > sc query type= driver  | more
        > sc query type= service | more
        > sc query type= all     | more

    8. SVN Repository 생성

        8.1. 사용자 변수의 PATH 항목에 추가한다.

            PATH=%PATH%;%ProgramFiles(x86)%\Subversion\bin;

        8.2. Repository root 폴더로 이동한다. 그리고 프로젝트를 위한 TEST_PRJ 저장소(repository)를 생성한다.
            그리고 생성된 폴더를 확인한다. 인증을 위한 계정을 만든다.

            예) K:\PROG\_Repo_

            > svnadmin create TEST_PRJ
            > tree

                SSD250DATA 볼륨에 대한 폴더 경로의 목록입니다.
                볼륨 일련 번호는 8EB4-DD7F입니다.
                K:.
                └─TEST_PRJ
                    ├─conf
                    ├─db
                    │  ├─revprops
                    │  │  └─0
                    │  ├─revs
                    │  │  └─0
                    │  ├─transactions
                    │  └─txn-protorevs
                    ├─hooks
                    └─locks

            > type TEST_PRJ\conf\svnserve.conf

                ### This file controls the configuration of the svnserve daemon, if you
                ### use it to allow access to this repository.  (If you only allow
                ### access through http: and/or file: URLs, then this file is
                ### irrelevant.)

                ### Visit http://subversion.tigris.org/ for more information.

                [general]
                ### These options control access to the repository for unauthenticated
                ### and authenticated users.  Valid values are "write", "read",
                ### and "none".  The sample settings below are the defaults.
                # anon-access = read
                # auth-access = write
                ### The password-db option controls the location of the password
                ### database file.  Unless you specify a path starting with a /,
                ### the file's location is relative to the directory containing
                ### this configuration file.
                ### If SASL is enabled (see below), this file will NOT be used.
                ### Uncomment the line below to use the default password file.
                password-db = passwd                                                         <- 인증관련 확인
                ### The authz-db option controls the location of the authorization
                ### rules for path-based access control.  Unless you specify a path
                ### starting with a /, the file's location is relative to the the
                ### directory containing this file.  If you don't specify an
                ### authz-db, no path-based access control is done.
                ### Uncomment the line below to use the default authorization file.
                # authz-db = authz
                ### This option specifies the authentication realm of the repository.
                ### If two repositories have the same authentication realm, they should
                ### have the same password database, and vice versa.  The default realm
                ### is repository's uuid.
                # realm = My First Repository

                [sasl]
                ### This option specifies whether you want to use the Cyrus SASL
                ### library for authentication. Default is false.
                ### This section will be ignored if svnserve is not built with Cyrus
                ### SASL support; to check, run 'svnserve --version' and look for a line
                ### reading 'Cyrus SASL authentication is available.'
                # use-sasl = true
                ### These options specify the desired strength of the security layer
                ### that you want SASL to provide. 0 means no encryption, 1 means
                ### integrity-checking only, values larger than 1 are correlated
                ### to the effective key length for encryption (e.g. 128 means 128-bit
                ### encryption). The values below are the defaults.
                # min-encryption = 0
                # max-encryption = 256

            > type TEST_PRJ\conf\passwd

                ### This file is an example password file for svnserve.
                ### Its format is similar to that of svnserve.conf. As shown in the
                ### example below it contains one section labelled [users].
                ### The name and password for each user follow, one account per line.

                [users]
                # harry = harryssecret
                # sally = sallyssecret
                admin = admin123                                                               <- 계정관련 확인


        8.3. SVN 서버를 실행한다. 그리고 확인한다.

            > start svnserve -d -r .          <- 서버가 실행 하는 DOS 창이 새로 생긴다.

            > netstat -nab | more
                .....
                 TCP    0.0.0.0:3690           0.0.0.0:0              LISTENING     <- 사용포트 3690  프로그램 svnserve.exe
                [svnserve.exe]
                .....

        8.4. 기존 프로젝트를 PC로 checkout 한다.  -> 확인용

            > svn checkout svn://matcmsmine01/repo-tasks/SASEMARTCMS
            .....

        8.5. 기존 프로젝트를 PC로 export 한다.

            > svn export svn://matcmsmine01/repo-tasks/SASEMARTCMS        <- Local PC에 SASEMARTCMS 폴더가 생긴다.
            .....

        8.5. PC로 export 한 소스를 다른 SVN 저장소(repository)로 import 한다.

            > svn import SASEMARTCMS svn://localhost/TEST_PRJ -m "svn 임포트 로그" --username admin --password admin123
            .....


    9. Jenkins







----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------

[ 한글변환 ]

    1. Eclipse > Window > Preference > General > Workspace > Text file encoding > Other : UTF-8

    2. xml 파일 utf-8    <?xml version="1.0" encoding="utf-8"?>

    3. .bash_profile     export LANG=ko_KR.UTF-8    <->    export LANG=ko_KR.EUC-KR

    4. Xshell 등록정보에서 터미널 > 출력변환 > 인코딩 : 유니코드(UTF-8)







----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------

1. 삭제

    $CATALINA_BASE/bin/catalina.sh 을 편집한다.

        org.apache.catalina.startup.Bootstrap "%@" start >> "$CATALINA_BASE"/logs/catalina.out 2>&1 &

    위와 같이 "$CATALINA_BASE"/logs/catalina.out 으로 로그를 보내는 것을 아래와 같이 변경하여 보내지 않도록 한다.

        org.apache.catalina.startup.Bootstrap "%@" start >> /dev/null 2>&1 &

    if else 로 구성되어서 아마 2군데를 편집해야 할 것이다.

        touch "$CATALINA_BASE"/logs/catalina.out

    쓸데없기 때문에 주석(#) 처리하거나 삭제한다.

2. rotatecatalinalog.sh을 생성하여 cron에 등록한다.

        $ vi rotatecatalinalog.sh

        #!/bin/sh
        LOG_DIR=/util/esb/tomcat6/logs
        DATE=`/bin/date +%Y-%m-%d`
        /bin/nice /bin/cp $LOG_DIR/catalina.out $LOG_DIR/$DATE.catalina.out
        /bin/nice /bin/cat /dev/null > $LOG_DIR/catalina.out

    위와 같이 해당 날짜로 복사하고 원판 catalina.out은 비워주는 sh을 만들어서 crontab에 등록한다.

        $ chmod 755 rotatecatalinalog.sh

        $ crontab -e

            59 23 * * * /util/esb/tomcat6/bin/rotatecatalinalog.sh

3. cronolog사용

    http://cronolog.org

        $ cd /home/esb

        $ wget http://cronolog.org/download/cronolog-1.6.2.tar.gz

        # tar xzvf cronolog-1.6.2.tar.gz

        # cd cronolog-1.6.2

        # ./configure --prefix=/home/esb/cronolog

        # make && make install

        # ls -al /home/esb/cronolog/sbin

    $CATALINA_BASE/bin/catalina.sh을 편집한다.

        org.apache.catalina.startup.Bootstrap "$@" start >> "$CATALINA_BASE"/logs/catalina.out 2>&1 &

    ->  org.apache.catalina.startup.Bootstrap "$@" start | /home/esb/cronolog/sbin/cronolog "$CATALINA_BASE"/logs/%Y-%m-%d.catalina.out >> /dev/null 2>&1 &




----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------

/*
 *  [ JAVA SSL PKIX path building failed 오류시 ]
 *
 *
 *  JSSE(Java Secure Socket Extension, J2SE 1.4 이후 버전에는 JSSE가 포함되어 있다.)를 이용하여
 *  SSL 연결을 시도할 때 아래와 같은 exception이 발생할 수 있다. 공인 인증기관에서 받은 인증서가
 *  아닌 개인 인증서를 사용하는 경우 많이 발생할 수 있다.
 *
 *  javax.net.ssl.SSLHandshakeException: sun.security.validator.ValidatorException: PKIX path
 *  building failed: sun.security.provider.certpath.SunCertPathBuilderException: unable to find
 *  valid certification path to requested target
 *
 *  그렇다면 어떻게 해야 하느냐?? 여러 가지 방법이 있지만, 간단한 방법은 서버의 인증서를 신뢰할
 *  수 있는 인증서 목록(KeyStore)에 추가하면 된다. 인증서를 추가하려면 우선 인증서를 받아야겠다.
 *  인증서는 첨부된 파일(installcert.java)을 받아서 컴파일하고 실행하면 된다. 실행시키면 아래와
 *  같은 화면이 나타날 것이다. "ecc.fedora.redhat.com" 부분에 인증서를 원하는 서버의 ip와 port를
 *  써주면 된다.
 *
 *          관련 소스 : installcert.java
 *
 *      % java InstallCert ecc.fedora.redhat.com
 *      Loading KeyStore C:\Program Files\Java\jre1.5.0_08\lib\security\cacerts...
 *      Opening connection to ecc.fedora.redhat.com:443...
 *      Starting SSL handshake...
 *
 *      javax.net.ssl.SSLHandshakeException: sun.security.validator.ValidatorException: PKIX
 *          path building failed: sun.security.provider.certpath.SunCertPathBuilderException: unable
 *          to find valid certification path to requested target
 *      at com.sun.net.ssl.internal.ssl.Alerts.getSSLException(Alerts.java:150)
 *      at com.sun.net.ssl.internal.ssl.SSLSocketImpl.fatal(SSLSocketImpl.java:1476)
 *      at com.sun.net.ssl.internal.ssl.Handshaker.fatalSE(Handshaker.java:174)
 *      at com.sun.net.ssl.internal.ssl.Handshaker.fatalSE(Handshaker.java:168)
 *      at com.sun.net.ssl.internal.ssl.ClientHandshaker.serverCertificate(ClientHandshaker.java:846)
 *      at com.sun.net.ssl.internal.ssl.ClientHandshaker.processMessage(ClientHandshaker.java:106)
 *      at com.sun.net.ssl.internal.ssl.Handshaker.processLoop(Handshaker.java:495)
 *      at com.sun.net.ssl.internal.ssl.Handshaker.process_record(Handshaker.java:433)
 *      at com.sun.net.ssl.internal.ssl.SSLSocketImpl.readRecord(SSLSocketImpl.java:815)
 *      at com.sun.net.ssl.internal.ssl.SSLSocketImpl.performInitialHandshake(SSLSocketImpl.java:1025)
 *      at com.sun.net.ssl.internal.ssl.SSLSocketImpl.startHandshake(SSLSocketImpl.java:1038)
 *      at InstallCert.main(InstallCert.java:63)
 *      Caused by: sun.security.validator.ValidatorException: PKIX path building failed: sun.security.
 *          provider.certpath.SunCertPathBuilderException: unable to find valid certification path to requested target
 *      at sun.security.validator.PKIXValidator.doBuild(PKIXValidator.java:221)
 *      at sun.security.validator.PKIXValidator.engineValidate(PKIXValidator.java:145)
 *      at sun.security.validator.Validator.validate(Validator.java:203)
 *      at com.sun.net.ssl.internal.ssl.X509TrustManagerImpl.checkServerTrusted(X509TrustManagerImpl.java:172)
 *      at InstallCert$SavingTrustManager.checkServerTrusted(InstallCert.java:158)
 *      at com.sun.net.ssl.internal.ssl.JsseX509TrustManager.checkServerTrusted(SSLContextImpl.java:320)
 *      at com.sun.net.ssl.internal.ssl.ClientHandshaker.serverCertificate(ClientHandshaker.java:839)
 *      ... 7 more
 *      Caused by: sun.security.provider.certpath.SunCertPathBuilderException: unable to find valid certification path to requested target
 *      at sun.security.provider.certpath.SunCertPathBuilder.engineBuild(SunCertPathBuilder.java:236)
 *      at java.security.cert.CertPathBuilder.build(CertPathBuilder.java:194)
 *      at sun.security.validator.PKIXValidator.doBuild(PKIXValidator.java:216)
 *      ... 13 more
 *
 *      Server sent 2 certificate(s):
 *
 *      1 Subject CN=ecc.fedora.redhat.com, O=example.com, C=US
 *      Issuer CN=Certificate Shack, O=example.com, C=US
 *      sha1 2e 7f 76 9b 52 91 09 2e 5d 8f 6b 61 39 2d 5e 06 e4 d8 e9 c7
 *      md5 dd d1 a8 03 d7 6c 4b 11 a7 3d 74 28 89 d0 67 54
 *
 *      2 Subject CN=Certificate Shack, O=example.com, C=US
 *      Issuer CN=Certificate Shack, O=example.com, C=US
 *      sha1 fb 58 a7 03 c4 4e 3b 0e e3 2c 40 2f 87 64 13 4d df e1 a1 a6
 *      md5 72 a0 95 43 7e 41 88 18 ae 2f 6d 98 01 2c 89 68
 *
 *      Enter certificate to add to trusted keystore or 'q' to quit: [1]
 *
 *  실행시키면 SSL handshake가 일어난다. 화면에는 exception 부분도 출력된다. exception이 출력되는
 *  이유는 서버에서 사용하는 인증서가 없기 때문에 SSL 연결을 성공할 수 없기 때문이다. 자, 인증서를
 *  받자. 그리고 화면에는 trusted KeyStore에 인증서를 추가할 것인지 묻고 있다. sha1과 md5를 확인해서
 *  올바른 인증서인지 확인한 다음, 올바른 인증서인 경우 "1"을 입력해서 인증서를 받으면 되고,
 *  받고 싶지 않은 경우는 "q"를 입력해서 프로그램을 종료시키면 된다. 인증서를 받게 되면 아래와
 *  같은 화면이 출력되고, "jssecacerts" 파일로 인증서가 저장된다.
 *
 *      [
 *      [
 *      Version: V3
 *      Subject: CN=ecc.fedora.redhat.com, O=example.com, C=US
 *      Signature Algorithm: MD5withRSA, OID = 1.2.840.113549.1.1.4
 *
 *      Key: SunPKCS11-Solaris RSA public key, 1024 bits (id 5158256, session object)
 *      modulus: 1402933022884660852748661816869706021655226675890
 *      635441166580364941191074987345500771612454338502131694873337
 *      233737712894815966313948609351561047977102880577818156814678
 *      041303637255354084762814638611185951230474669455913908815827
 *      173696651397340074281578017567044868711049821409365743953199
 *      69584127568303024757
 *      public exponent: 65537
 *      Validity: [From: Wed Jan 18 13:16:12 PST 2006,
 *      To: Wed Apr 18 14:16:12 PDT 2007]
 *      Issuer: CN=Certificate Shack, O=example.com, C=US
 *      SerialNumber: [ 0f]
 *
 *      Certificate Extensions: 2
 *      [1]: ObjectId: 2.16.840.1.113730.1.1 Criticality=false
 *      NetscapeCertType [
 *      SSL server
 *      ]
 *
 *      [2]: ObjectId: 2.5.29.15 Criticality=false
 *      KeyUsage [
 *      Key_Encipherment
 *      ]
 *
 *      ]
 *      Algorithm: [MD5withRSA]
 *      Signature:
 *      0000: 6D F4 2A 63 76 2A 05 70 A2 21 0E 1E 4A 31 BE 6B m.*cv*.p.!..J1.k
 *      0010: 15 64 D8 BB 35 36 82 B0 0D 2A 96 FA 7A 9F A1 59 .d..56...*..z..Y
 *      0020: CA 90 C3 28 C5 A6 9B 59 05 3B EB B2 8D C9 5E 38 ...(...Y.;....^8
 *      0030: 62 ED 1A D7 93 DF 2A A5 D6 54 94 23 15 A2 0C E5 b.....*..T.#....
 *      0040: 13 40 2C 3E 59 E4 2A EB 51 AC 9E 28 44 23 87 B1 .@,>Y.*.Q..(D#..
 *      0050: 34 0B AC F3 E0 39 CA B8 35 B4 78 07 BF 28 4C C4 4....9..5.x..(L.
 *      0060: 9A 2B A3 E9 04 26 78 19 F0 62 EA 0A B5 BB DC 0B .+...&x..b......
 *      0070: 90 59 E7 77 90 F8 BC 8A 1B 74 4B 4D C1 F8 3B 6C .Y.w.....tKM..;l
 *
 *      ]
 *
 *      Added certificate to keystore 'jssecacerts' using alias 'ecc.fedora.redhat.com-1'
 *
 *  이제 이 인증서를 어떻게 사용할까?? 여기에도 몇 가지 방법이 있다. 가장 간단한 방법은
 *  "$JAVA_HOME/jre/lib/security" 폴더에 받은 인증서 파일을 복사하는 방법이다. (이 경우는
 *  파일명을 변경하면 인증서를 찾지 못 한다. 원인은 아직까지는 잘 모르겠다. 본인은
 *  이 방법 대신 다음 방법을 사용한다.)
 *  그리고 다른 방법은 인증서를 원하는 위치로 옮기고 (이 경우는 파일명을 변경해도 상관 없다.)
 *  SSL 연결이 필요한 java 명령을 실행할 때, VM 옵션으로 "-Djavax.net.ssl.trustStore=인증서의
 *  경로(인증서 파일명 포함)"를 추가해주면 된다. 다시 첨부 파일을 실행시켰을 때, 아까와는
 *  다른 아래와 같은 화면이 출력되면 성공이다.
 *
 *      % java InstallCert ecc.fedora.redhat.com
 *      Loading KeyStore jssecacerts...
 *      Opening connection to ecc.fedora.redhat.com:443...
 *      Starting SSL handshake...
 *
 *      No errors, certificate is already trusted
 *
 *      Server sent 2 certificate(s):
 *
 *      1 Subject CN=ecc.fedora.redhat.com, O=example.com, C=US
 *      Issuer CN=Certificate Shack, O=example.com, C=US
 *      sha1 2e 7f 76 9b 52 91 09 2e 5d 8f 6b 61 39 2d 5e 06 e4 d8 e9 c7
 *      md5 dd d1 a8 03 d7 6c 4b 11 a7 3d 74 28 89 d0 67 54
 *
 *      2 Subject CN=Certificate Shack, O=example.com, C=US
 *      Issuer CN=Certificate Shack, O=example.com, C=US
 *      sha1 fb 58 a7 03 c4 4e 3b 0e e3 2c 40 2f 87 64 13 4d df e1 a1 a6
 *      md5 72 a0 95 43 7e 41 88 18 ae 2f 6d 98 01 2c 89 68
 *
 *      Enter certificate to add to trusted keystore or 'q' to quit: [1]
 *      q
 *      KeyStore not changed
 *
 *  위 프로그램 실행으로 생성된 jssecacerts 파일을 %JAVA_HOME%/jre/lib/security 로 복사한다.
 *  그리고 HttpsURLConnection을 실행하면 에러가 생성되지 않는다.
 *
 *      javax.net.ssl.SSLHandshakeException: sun.security.validator.ValidatorException: PKIX
 *          path building failed: sun.security.provider.certpath.SunCertPathBuilderException: unable
 *          to find valid certification path to requested target
 *
 *  위 에러가 해결된다.
 *
 */

import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.security.KeyStore;
import java.security.MessageDigest;
import java.security.cert.CertificateException;
import java.security.cert.X509Certificate;

import javax.net.ssl.SSLContext;
import javax.net.ssl.SSLException;
import javax.net.ssl.SSLSocket;
import javax.net.ssl.SSLSocketFactory;
import javax.net.ssl.TrustManager;
import javax.net.ssl.TrustManagerFactory;
import javax.net.ssl.X509TrustManager;


public class InstallCert {

    public static void main(String[] args) throws Exception {
        String host;
        int port;
        char[] passphrase;
        if ((args.length == 1) || (args.length == 2)) {
            String[] c = args[0].split(":");
            host = c[0];
            port = (c.length == 1) ? 443 : Integer.parseInt(c[1]);
            String p = (args.length == 1) ? "changeit" : args[1];
            passphrase = p.toCharArray();
        } else {
            System.out.println("Usage: java InstallCert <host>[:port] [passphrase]");
            return;
        }

        File file = new File("jssecacerts");
        if (file.isFile() == false) {
            char SEP = File.separatorChar;
            File dir = new File(System.getProperty("java.home") + SEP + "lib" + SEP + "security");
            file = new File(dir, "jssecacerts");
            if (file.isFile() == false) {
                file = new File(dir, "cacerts");
            }
        }
        System.out.println("Loading KeyStore " + file + "...");
        InputStream in = new FileInputStream(file);
        KeyStore ks = KeyStore.getInstance(KeyStore.getDefaultType());
        ks.load(in, passphrase);
        in.close();

        SSLContext context = SSLContext.getInstance("TLS");
        TrustManagerFactory tmf = TrustManagerFactory.getInstance(TrustManagerFactory.getDefaultAlgorithm());
        tmf.init(ks);
        X509TrustManager defaultTrustManager = (X509TrustManager)tmf.getTrustManagers()[0];
        SavingTrustManager tm = new SavingTrustManager(defaultTrustManager);
        context.init(null, new TrustManager[] {tm}, null);
        SSLSocketFactory factory = context.getSocketFactory();

        System.out.println("Opening connection to " + host + ":" + port + "...");
        SSLSocket socket = (SSLSocket)factory.createSocket(host, port);
        socket.setSoTimeout(10000);
        try {
            System.out.println("Starting SSL handshake...");
            socket.startHandshake();
            socket.close();
            System.out.println();
            System.out.println("No errors, certificate is already trusted");
        } catch (SSLException e) {
            System.out.println();
            e.printStackTrace(System.out);
        }

        X509Certificate[] chain = tm.chain;
        if (chain == null) {
            System.out.println("Could not obtain server certificate chain");
            return;
        }

        BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));

        System.out.println();
        System.out.println("Server sent " + chain.length + " certificate(s):");
        System.out.println();
        MessageDigest sha1 = MessageDigest.getInstance("SHA1");
        MessageDigest md5 = MessageDigest.getInstance("MD5");
        for (int i = 0; i < chain.length; i++) {
            X509Certificate cert = chain[i];
            System.out.println(" " + (i + 1) + " Subject " + cert.getSubjectDN());
            System.out.println("   Issuer  " + cert.getIssuerDN());
            sha1.update(cert.getEncoded());
            System.out.println("   sha1    " + toHexString(sha1.digest()));
            md5.update(cert.getEncoded());
            System.out.println("   md5     " + toHexString(md5.digest()));
            System.out.println();
        }

        System.out.println("Enter certificate to add to trusted keystore or 'q' to quit: [1]");
        String line = reader.readLine().trim();
        int k;
        try {
            k = (line.length() == 0) ? 0 : Integer.parseInt(line) - 1;
        } catch (NumberFormatException e) {
            System.out.println("KeyStore not changed");
            return;
        }

        X509Certificate cert = chain[k];
        String alias = host + "-" + (k + 1);
        ks.setCertificateEntry(alias, cert);

        OutputStream out = new FileOutputStream("jssecacerts");
        ks.store(out, passphrase);
        out.close();

        System.out.println();
        System.out.println(cert);
        System.out.println();
        System.out.println("Added certificate to keystore 'jssecacerts' using alias '" + alias + "'");
    }

    private static final char[] HEXDIGITS = "0123456789abcdef".toCharArray();

    private static String toHexString(byte[] bytes) {
        StringBuilder sb = new StringBuilder(bytes.length * 3);
        for (int b : bytes) {
            b &= 0xff;
            sb.append(HEXDIGITS[b >> 4]);
            sb.append(HEXDIGITS[b & 15]);
            sb.append(' ');
        }
        return sb.toString();
    }

    private static class SavingTrustManager implements X509TrustManager {

        private final X509TrustManager tm;
        private X509Certificate[] chain;

        SavingTrustManager(X509TrustManager tm) {
            this.tm = tm;
        }

        public X509Certificate[] getAcceptedIssuers() {
            throw new UnsupportedOperationException();
        }

        public void checkClientTrusted(X509Certificate[] chain, String authType) throws CertificateException {
            throw new UnsupportedOperationException();
        }

        public void checkServerTrusted(X509Certificate[] chain, String authType) throws CertificateException {
            this.chain = chain;
            tm.checkServerTrusted(chain, authType);
        }
    }
}


----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------

package tain.kr.test.url.v01;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.security.KeyStore;
import java.security.MessageDigest;
import java.security.cert.CertificateException;
import java.security.cert.X509Certificate;

import javax.net.ssl.SSLContext;
import javax.net.ssl.SSLException;
import javax.net.ssl.SSLSocket;
import javax.net.ssl.SSLSocketFactory;
import javax.net.ssl.TrustManager;
import javax.net.ssl.TrustManagerFactory;
import javax.net.ssl.X509TrustManager;

public class InstallCert2 {

    public static void main(String[] args) throws Exception {
        checkCert();
    }

    public static void checkCert() throws Exception {
        String host = "www.itis.or.kr";
        int port = 443;
        char[] passphrase = "changeit".toCharArray();

        File file = new File("jssecacerts");
        System.out.println(System.getProperty("java.home"));

        if (file.isFile() == false) {
            char SEP = File.separatorChar;
            File dir = new File(System.getProperty("java.home") + SEP + "lib" + SEP + "security");
            file = new File(dir, "jssecacerts");
            if (file.isFile() == false) {
                file = new File(dir, "cacerts");
            }
        }
        System.out.println("Loading KeyStore " + file + "...");
        InputStream in = new FileInputStream(file);
        KeyStore ks = KeyStore.getInstance(KeyStore.getDefaultType());
        ks.load(in, passphrase);
        in.close();

        SSLContext context = SSLContext.getInstance("TLS");
        TrustManagerFactory tmf = TrustManagerFactory.getInstance(TrustManagerFactory.getDefaultAlgorithm());
        tmf.init(ks);
        X509TrustManager defaultTrustManager = (X509TrustManager)tmf.getTrustManagers()[0];
        SavingTrustManager tm = new SavingTrustManager(defaultTrustManager);
        context.init(null, new TrustManager[] {tm}, null);
        SSLSocketFactory factory = context.getSocketFactory();

        System.out.println("Opening connection to " + host + ":" + port + "...");
        SSLSocket socket = (SSLSocket)factory.createSocket(host, port);
        socket.setSoTimeout(10000);
        try {
            System.out.println("Starting SSL handshake...");
            socket.startHandshake();
            socket.close();
            System.out.println();
            System.out.println("No errors, certificate is already trusted");
            return;
        } catch (SSLException e) {
            System.out.println(e.getMessage());
            //e.printStackTrace(System.out);
        }

        X509Certificate[] chain = tm.chain;
        if (chain == null) {
            System.out.println("Could not obtain server certificate chain");
            return;
        }

        BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));

        //System.out.println();
        //System.out.println("Server sent " + chain.length + " certificate(s):");
        //System.out.println();
        MessageDigest sha1 = MessageDigest.getInstance("SHA1");
        MessageDigest md5 = MessageDigest.getInstance("MD5");
        for (int i = 0; i < chain.length; i++) {
            X509Certificate cert = chain[i];
            //System.out.println
            //  (" " + (i + 1) + " Subject " + cert.getSubjectDN());
            //System.out.println("   Issuer  " + cert.getIssuerDN());
            sha1.update(cert.getEncoded());
            //System.out.println("   sha1    " + toHexString(sha1.digest()));
            md5.update(cert.getEncoded());
            //System.out.println("   md5     " + toHexString(md5.digest()));
            //System.out.println();
        }

        //System.out.println("Enter certificate to add to trusted keystore or 'q' to quit: [1]");
        //String line = reader.readLine().trim();
        //int k;
        //try {
        //    k = (line.length() == 0) ? 0 : Integer.parseInt(line) - 1;
        //} catch (NumberFormatException e) {
        //    System.out.println("KeyStore not changed");
        //    return;
        //}

        int k=0;
        X509Certificate cert = chain[k];
        String alias = host + "-" + (k + 1);
        ks.setCertificateEntry(alias, cert);

        OutputStream out = new FileOutputStream("jssecacerts");
        ks.store(out, passphrase);
        out.close();

        //System.out.println();
        //System.out.println(cert);
        //System.out.println();
        System.out.println("Added certificate to keystore 'jssecacerts' using alias '" + alias + "'");
    }

    private static final char[] HEXDIGITS = "0123456789abcdef".toCharArray();

    private static String toHexString(byte[] bytes) {
        StringBuilder sb = new StringBuilder(bytes.length * 3);
        for (int b : bytes) {
            b &= 0xff;
            sb.append(HEXDIGITS[b >> 4]);
            sb.append(HEXDIGITS[b & 15]);
            sb.append(' ');
        }
        return sb.toString();
    }

    private static class SavingTrustManager implements X509TrustManager {

        private final X509TrustManager tm;
        private X509Certificate[] chain;

        SavingTrustManager(X509TrustManager tm) {
            this.tm = tm;
        }

        public X509Certificate[] getAcceptedIssuers() {
            throw new UnsupportedOperationException();
        }

        public void checkClientTrusted(X509Certificate[] chain, String authType) throws CertificateException {
            throw new UnsupportedOperationException();
        }

        public void checkServerTrusted(X509Certificate[] chain, String authType) throws CertificateException {
            this.chain = chain;
            tm.checkServerTrusted(chain, authType);
        }
    }
}


----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
[ https 프로토콜 사용 ]

	웹서버에서 종종 중요한 정보교환을 위해 SSL을 사용하곤 한다.
	이번의 경우는 HttpsURLConnection을 통해 SSL연결을 하는데 있어 문제되었던 사항이다.
	
	<환경>
		- Tomcat 5.5
		- Apache 2.0 OpenSSL 포함 버전
		- J2EE 5.X
	
	<문제>
		SSL연결시 아래와 같은 Exception이 발생했다.
		
		javax.net.ssl.SSLHandshakeException: sun.security.validator.ValidatorException: PKIX
		path building failed: sun.security.provider.certpath.SunCertPathBuilderException: unable
		to find valid certification path to requested target
		
		javax.net.ssl.SSLHandshakeException 은 접속하려는 SSL서버에 유효한 인증서가 없는 경우를 의미한다.
		이러한 인증서의 위치는 %JRE_HOME%\lib\security 에 cacerts 파일로 존재한다.
		즉, 이파일에 현재 접속하려는 SSL서버의 인증서가 존재하지 않는것이다.
	
	<해결>
		첨부된 InstallCert.java을 열면 소스 상단부분에
		/************** 소스 24째줄 ***************/
		String host = "127.0.0.1"; //SSL서버의 도메인이나 IP
		 int port = 443;
		
		위와같이 host를 설정하는 부분이 있다. host에는 접속하려는 SSL서버의 IP나 도메인을 설정한다.
		이소스는 java.net.ssl.SSLHandshakeException이 발생하면 해당 서버에서 인증서를 받아 파일로
		저장해주는 역할을 한다.
		
		컴파일하고 클래스를 실행하면 전과같이 java.net.ssl.SSLHandshakeException이 발생하고 class와
		동일한 위치에 jssecacerts라는 인증서 파일이 생성된다. 이 파일을 J2EE 5 설치시 생성해던
		%JRE_HOME%\lib\security 에 넣어주면 완료된다.
		기존의 cacerts파일에 인증서가 존재하지 않으면 jssecacerts에서 찾는다고 한다.

	[출처] HttpsURLConnection 을 사용한 SSL서버 접속|작성자 소요


----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------

Corp.  (corporation) : 법인 종합상사로 단체, 사단법인을 칭할 때 사용합니다.
    미국에서는 법인을 뜻하고 영국에서는 주식회사로 통합니다.
    보통 이것은 규모가 좀 큰 곳에서 사용하는 것 같습니다.

Co., Ltd. (Company Limited): . : 주식회사이면서 유한책임회사인 경우에 사용하는 표기 입니다.
    Company는 말그대로 회사의 약자임을 나타내고 limited는 유한책임을 나타내는 말입니다.
    이 단어는 표기에 주의해야하는데 .(마침표)는 compant의 약자이므로 표시하는것이고 ,(콤마) 는
    company 와 limited를 구분표시할 때 사용하는 것이기 때문에 꼭 사용해야 합니다.

Inc.  (Incorporated) : 미국에서 말하는 주식회사는 이 표기를 많이 사용합니다.

    이외에 개인회사의 경우에는 Company의 줄임말인 Co.를 사용하시는 것이 좋습니다.

PLC  (Public Limited Company) - 상장법인으로 이것도 개인회사의 경우 많이 사용되는데 영국에서 많이 사용됩니다.
    또 우리나라 회사법제에서 인정되지 아니하는 회사형태로 LLC라는 형태가 있습니다. 이는
    유한책임이라는 점에서 주식회사와 유사하나 법인세 면제조치 등 측면에서 조합적 겅격이
    강조되는 회사로 유한회사와 조합의 중간정도의 성격이라고 생각하시면 되는 곳입니다.

    이는 명확히 구분하기 힘들 수도 있는데 이들의 가장 큰 차이점은 문제발생시 책임을 어디까지
    지는가입니다. Corp.의 경우에는 개인사업자와 동일한 책임을 지는 무한책임회사를 말합니다.
    보통합자회사의 경우 무한책임을 집니다. 즉, 자신들이 투자한 회사돈이 채권자들에게 줄돈보다
    부족하면 사재를 털어서라도 갚아야 합니다. 그러나 Co.,Ltd는 유한책임회사이기 때문에 회사가
    파산한다고해도 사주에게 책임을 물을 수 없는 곳을 회사의 사주가 출자한 범위내에서만 회사의
    자본위엄에 대한 책임을 집니다.

----------------------------------------------------------------------------------------------------
[ data grid : 한글문제 (32BIT) ]

AMERICAN_AMERICA.US7ASCII


----------------------------------------------------------------------------------------------------
[ DATA GRID : 한글문제 (64BIT) ]

http://metalzang.blog.me/130127660830

1. Toad에서 데이터 베이스의 캐릭터 셋을 확인

    select * from nls_database_parameters where parameter = 'NLS_CHARACTERSET';

2. 결과를 확인하니 'KO16MSWIN949'임.



----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------

----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------

/*
http://sourceforge.net/projects/sshtools/
*/

package com.mimul.sample;
import com.sshtools.j2ssh.SftpClient;
import com.sshtools.j2ssh.SshClient;
import com.sshtools.j2ssh.authentication.AuthenticationProtocolState;
import com.sshtools.j2ssh.authentication.PasswordAuthenticationClient;
public class J2sshSftpCient
{
    private SshClient client = null;
    private PasswordAuthenticationClient auth = null;
    private SftpClient sftp = null;

    public J2sshSftpCient(String server, String user, String pwd) throws Exception
    {
        try {
            if (server == null || user == null || pwd == null) {
                System.out.println("Parameter is null!");
            }
            client = new SshClient();
            client.setSocketTimeout(70000);
            client.connect(server);

            auth = new PasswordAuthenticationClient();
            auth.setUsername(user);
            auth.setPassword(pwd);
            int result = client.authenticate(auth);
            if (result != AuthenticationProtocolState.COMPLETE) {
                 throw new Exception("Login to " + server + ":22" +
                      user + "/" + pwd + " failed");
            }
            sftp = client.openSftpClient();
        } catch (Exception e) {
            System.out.println(e);
            throw e;
        }
    }

    public boolean put(String path) throws Exception
    {
        boolean rtn = false;
        try    {
            if (sftp != null) {
                sftp.put(path);
                rtn = true;
            }
        } catch(Exception e) {
            System.out.println(e);
        }
        return rtn;
    }

    public boolean get(String srcFile, String destFile) throws Exception
    {
        boolean rtn = false;
        try {
            if (sftp != null) {
                if (destFile == null)
                    sftp.get(srcFile);
                else
                    sftp.get(srcFile, destFile);
                rtn = true;
            }
        } catch(Exception e) {
            System.out.println(e);
        }
        return rtn;
    }

    public boolean lcd(String path) throws Exception
    {
        boolean rtn = false;
        try {
            if (sftp != null) {
                sftp.lcd(path);
                rtn = true;
            }
        } catch(Exception e) {
            System.out.println(e);
        }
        return rtn;
    }

    public boolean cd(String path) throws Exception
    {
        boolean rtn = false;
        try {
            if (sftp != null) {
                sftp.cd(path);
                rtn = true;
            }
        } catch(Exception e) {
            System.out.println(e);
        }
        return rtn;
    }

    public String pwd() throws Exception
    {
        String rtnStr = null;
        try {
            if (sftp != null) {
                rtnStr = sftp.pwd();
            }
        } catch(Exception e) {
            System.out.println(e);
        }
        return rtnStr;
    }

    public boolean chmod(int permissions, String path) throws Exception
    {
        boolean rtn = false;
        try {
            if (sftp != null) {
                sftp.chmod(permissions, path);
                rtn = true;
            }
        } catch(Exception e) {
            System.out.println(e);
        }
        return rtn;
    }

    public boolean isClosed() throws Exception
    {
        boolean rtn = false;
        try {
            if (sftp != null)
                rtn = sftp.isClosed();
        } catch(Exception e) {
            System.out.println(e);
        }
        return rtn;
    }

    public boolean logout() throws Exception
    {
        boolean rtn = false;
        try {
            if (sftp != null)
                sftp.quit();
            if (client != null)
                client.disconnect();
            rtn = true;
        } catch(Exception e) {
            System.out.println(e);
        }
        return rtn;
    }

    public static void main(String[] args)
    {
        try {
            J2sshSftpCient jsftp = new J2sshSftpCient("remotehost", "userid",
                "password");
            boolean test = jsftp.cd("/home/k2/data");
            System.out.println(jsftp.pwd());
            boolean test1 = jsftp.lcd("C:/");
            boolean test2 = jsftp.get("README.TXT", "README.TXT");
            boolean isClosed = jsftp.isClosed();
            boolean test3 = jsftp.logout();
            System.out.println(test + " " + test1 + " " + test2 +
               " " + isClosed + " " + test3);
        } catch (Exception e) {
            System.out.println(e);
        }
    }
}

----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
[ Connection Pool ]


    [ Tomcat Connection Pool (JNDI) ]

    tomcat > conf > context.xml

        <Context>
            <WatchedResource> WEB-INF/web.xml </WatchedResource>

            // Oracle
            <Resource name="jdbc/vip125_ora"
                auth="Container"
                type="javax.sql.DataSource"
                driverClassName="oracle.jdbc.driver.OracleDriver"
                username="id"
                password="pwd"
                url="jdbc:oracle:thin:@localhost(ip):1521:db_name"
                validationQuery="SELECT 1 AS A  FROM DUAL"
                testWhileIdle="true"
                validationInterval="60000"
                maxActive="50"
                maxIdle="10"
                maxWait="-1"
                minIdle="0"/>

            // MySQL
            <Resource name="jdbc/vip123_my"
                auth="Container"
                type="javax.sql.DataSource"
                driverClassName="com.mysql.jdbc.Driver"
                username="id"
                password="pwd"
                url="jdbc:mysql://localhost(ip):3306/db_name"
                validationQuery="SELECT 1 AS A FROM DUAL"
                testWhileIdle="true"
                validationInterval="60000"
                maxActive="50"
                maxIdle="10"
                maxWait="-1"
                minIdle="0"/>
        </Context>

    Web Root > WEB-INF > web.xml

        <web-app xmlns="http://java.sun.com/xml/ns/javaee"....>

            // Oracle
            <resource-ref>
                <description>vip125_conn</description>
                <res-ref-name>jdbc/vip125_ora</res-ref-name>
                <res-type>javax.sql.DataSource</res-type>
                <res-auth>Container</res-auth>
            </resource-ref>

            // MySQL
            <resource-ref>
                <description>vip125_conn</description>
                <res-ref-name>jdbc/vip125_my</res-ref-name>
                <res-type>javax.sql.DataSource</res-type>
                <res-auth>Container</res-auth>
            </resource-ref>

            // 아래 로직 위에 추가해야됨
            <description>
                Welcome to Tomcat
            </description>

        </web-app>

    DB Connection (DBCP)

        Context context = new InitialContext();
        DataSource dataSource = (DataSource) context.lookup("java:comp/env/jdbc/vip125_ora");
        Connection conn = dataSource.getConnection();

        * driverClassName의 경우 import된 jar 파일에 맞게 설정해준다.



----------------------------------------------------------------------------------------------------

    위와 같은 web.xml, server.xml(혹은 context.xml)의 <resource> 부분을 바꿔주면
    commonDBCP 가 아닌 tomcatDBCP를 사용하게 된다.

        <Resource name="jndi_dbcp"
            auth="Container"
            type="javax.sql.DataSource"
            factory="org.apache.tomcat.jdbc.pool.DataSourceFactory"
            testWhileIdle="true"
            testOnBorrow="true"
            testOnReturn="false"
            validationQuery="SELECT 1"
            validationInterval="30000"
            timeBetweenEvictionRunsMillis="30000"
            maxActive="100"
            minIdle="10"
            maxWait="10000"
            initialSize="10"
            removeAbandonedTimeout="60"
            removeAbandoned="true"
            logAbandoned="true"
            minEvictableIdleTimeMillis="30000"
            jmxEnabled="true"
            jdbcInterceptors="org.apache.tomcat.jdbc.pool.interceptor.ConnectionState;org.apache.tomcat.jdbc.pool.interceptor.StatementFinalizer"
            username="user"
            password="pass"
            driverClassName="com.mysql.jdbc.Driver"
            url="jdbc:mysql://localhost:3306/jdni_dbcp?autoReconnect=true"/>

----------------------------------------------------------------------------------------------------
[ Tomcat DBCP(DataBase Connection Pool) }

    톰캣에서 제공되는 DBCP입니다. 기존의 apache commons에서 제공되는 DBCP보다 향상된 DBCP입니다.
    기존 사용하는 apache commons의 DBCP와 사용법은 유사합니다.

    기존에는 아래의 라이브러리 파일등을 톰캣의 lib폴더에 차가하여 설정해야 했지만

        commons-dbcp-1.2.1.jar
        commons-pool-1.2.jar
        commons-collections-3.1.jar
        ...

    톰캣 6.0 이후 버전부터는 lib폴더에 tomcat-dbcp.jar라는 이름으로 통합되어 좀더 간편하고 강력하게
    DBCP를 사용할 수 있습니다.

    1. 톰캣의 server.xml 파일에 <Context> 부분 아래에 다음의 소스를 추가해줍니다.

        <Context docBase="....>
            <Resource name="jdbc/nyakao"
                auth="Container"
                type="javax.sql.DataSource"
                driverClassName="oracle.jdbc.driver.OracleDriver"
                url="jdbc:oracle:thin:@url:port:sid"
                username="user"
                password="pass"
                loginTimeout="10"
                maxActive="100"
                maxIdle="30"
                maxWait="10"/>
        </Context>

    2. web.xml 파일에서 server.xml에서 정의한 리소스를 사용하기 위해 설정합니다.

        <resource-ref>
            <description>오라클 DBCP 예제</description>
            <res-ref-name>jdbc/nyakao</res-ref-name>
            <res-type>javax.sql.DataSource</res-type>
            <res-auth>Container</res-auth>
        </resource-ref>

    3. tomcat을 재시작한다.

    4. 서브릿에서 아래와 같이 DataSource를 사용한다.

        DataSource ds;

        try {
            Context initContext = new InitialContext();
            Context envContext = (Context)initContext.lookup("java:/comp/env");
            DataSource ds = (DataSource) envContext.lookup("jdbc/nyakao");
            Connection conn = ds.getConnection();
        } catch (Exception e) {
            e.printStackTrace();
        }





----------------------------------------------------------------------------------------------------

Tomcat 6.0
jdk 6.0
Mysql 5.0
툴은 이클립스 사용중입니다.
프로젝트 생성은 Dynamic Web project로 했습니다.

제가 지금 밑에와 같은 에러가 뜹니다.
javax.naming.NoInitialContextException: Need to specify class name in environment or system property, or as an applet parameter, or in an application resource file:  java.naming.factory.initial
 at javax.naming.spi.NamingManager.getInitialContext(Unknown Source)
 at javax.naming.InitialContext.getDefaultInitCtx(Unknown Source)
 at javax.naming.InitialContext.getURLOrDefaultInitCtx(Unknown Source)
 at javax.naming.InitialContext.lookup(Unknown Source)
 at util.DBResource.getConnection(DBResource.java:17)
 at util.Test.main(Test.java:21)

프로젝트는 C:\Program Files\Apache Software Foundation\Tomcat 6.0\webapps\ROOT
에 위치에 있구요.
server.xml
<Host name="localhost"  appBase="webapps"
            unpackWARs="true" autoDeploy="true"
            xmlValidation="false" xmlNamespaceAware="false">
<Context path="" reloadable="true" docBase="/ROOT" >
<Resource
       name="jdbc/jkj"
       auth="Container"
       type="javax.sql.DataSource"
       driverClassName="com.mysql.jdbc.Driver"
       url="jdbc:mysql://localhost:3306/db"
       username="root"
       password="1234"
      />
</Context>
</host>

web.xml
<resource-ref>
     <description>MySQL</description>
     <res-ref-name>jdbc/jkj</res-ref-name>
     <res-type>javax.sql.DataSource</res-type>
     <res-auth>Container</res-auth>
  </resource-ref>

DBresource.java
package util;
import java.sql.*;
import javax.naming.Context;
import javax.naming.InitialContext;
import javax.naming.NamingException;
import org.apache.log4j.Logger;
public class DBResource {
 Logger log = Logger.getLogger(DBResource.class);

 public Connection getConnection() throws NamingException,SQLException{
  Context context = new InitialContext();
  Context env = (Context)context.lookup("java:comp/env");
  DataSource ds = (DataSource) env.lookup("jdbc/jkj");
  return ds.getConnection();
 }

 public void close(ResultSet rs,PreparedStatement pstmt, Connection con){
  try{
   if(rs != null) rs.close();
   if(pstmt !=null) pstmt.close();
   if((con != null) && (con.isClosed())) con.setAutoCommit(true);

  }catch(SQLException e){
   log.error(e.toString());
  }
 }
}

Test.java
package util;
import java.sql.*;
import util.DBResource;
public class Test {

 public static void main(String[] args) {
  // TODO Auto-generated method stub
  DBResource db = new DBResource();
  PreparedStatement pstmt = null;
  Connection con = null;
  ResultSet rs = null;

  try{
   con = db.getConnection();
  }catch (Exception e){
   e.printStackTrace();
  }finally{
   db.close(rs, pstmt, con);
  }
 }
}

소스는 위와 같습니다.
jsp  페이지에서는 이상없이 잘 나오는데 java에서 connection을 불러오면 위와 같은 에러가 발생하네요.
다 검색을 해보고 몇시간째 해보고 있는데 답이 안나와서 질문을 드립니다..
답변을  상세히 해주시면 감사하겠습니다..
그리고 ROOT 밑이 아닌 다른 디렉토리에 프로젝트를 생성하면 어떻게 설정을 해줘야 하는지도 알려주시면
감사하겠습니다.

----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------

oracle stored procedure를 자바소스에서 사용하기

Oracle 에서 입력된 stored procedure 를 java에서 실행해서 결과를 얻고 싶으시다면, Statement 대신에 CallableStatement class를 사용하여 호출하면 된다.
그 뒤에는 어차피 insert, update 같은 것들과 같이 성공 또는 실패, 성공시 몇개가 성공했는지, query 인 경우에는 ResultSet 받아서 fetch 하면서 값 뽑아서 쓰시면 된다.

         // 위에서 JDBC  드라이버 잡고 Connection 까지 맺은 상태…
      CallableStatement cs = con.prepareCall("{call myStoredProcedure(?,?,?)}");
      cs.setInt(1,2);
      cs.registerOutParameter(2, java.sql.Types.VARCHAR);
      cs.registerOutParameter(3, java.sql.Types.INTEGER);
      cs.execute();
      System.out.println("*name : "+ cs.getString(2) +"*age : "+ cs.getInt(3));
      cs.close();
      con.close();








다음은 JAVA program에서 parameter가 있는 pl/sql stored procedure를 호출하는 예제이다. (IN, OUT, IN OUT)

1. procedure 생성
create or replace procedure javatest(
  p1 in varchar2,
  p2 in out varchar2,
  p3 out varchar2) as
begin
  p2:=p1 || p2;
  p3:=p1;
end;
/



2. java source
import java.sql.*;
import java.io.*;
import java.util.*;
public class callInoutProc extends Object {
   public static void main(String[] args) throws SQLException {
      DriverManager.registerDriver(new oracle.jdbc.driver.OracleDriver());
      // DB 접속
      Connection conn = DriverManager.getConnection ("jdbc:oracle:oci8:@S692815.WORLD", "scott", "tiger");
      // 변수 선언
      String p1value = new String("a");
      String p2value = new String("b");
      String p3value;
      // Prepare statement
      CallableStatement cs = conn.prepareCall("{call javatest(?,?,?)}");
      // IN parameter 값을 넘기기 위해 setString 함수를 사용
      cs.setString(1,p1value);
      cs.setString(2,p2value);
      // OUT parameter에 대한 정보를 registerOutParameter 함수를 이용하여 설정
      cs.registerOutParameter(2,Types.VARCHAR);
      cs.registerOutParameter(3,Types.VARCHAR);
      // Statement 수행
      cs.execute();
      // 수행결과 data를 가져옴.
      p2value = cs.getString(2);
      p3value = cs.getString(3);
      // 수행결과 출력
      System.out.println("p2 + p2value);
      System.out.println("p3 + p3value);
   }
}
3. 수행 결과
Sample Output
p2 is ab
p3 is a

----------------------------------------------------------------------------------------------------

http://cafe.naver.com/buldon/4330


----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------

<!DOCTYPE html>
<html>
    <head>
        <title> sjisbmoc </title>
<script type="text/javascript" src="http://code.jquery.com/jquery.min.js"></script>
<script type='text/javascript'>
//<![CDATA[

/* 첫번째 select option 값 */
var sel_01_al   = new Array();
sel_01_al.push({value:20000,text:'원피스'});
sel_01_al.push({value:24000,text:'아우터'});
sel_01_al.push({value:30000,text:'드레스'});

/* 두번째 select option 값 */
var sel_02_al   = new Array();
sel_02_al.push({value:1,text:'1개'});
sel_02_al.push({value:2,text:'2개'});
sel_02_al.push({value:3,text:'3개'});
sel_02_al.push({value:4,text:'4개'});
sel_02_al.push({value:5,text:'5개'});

$(document).ready(function(){
    var sel1 = new Array();
    sel1.push('<option value="">선택</option>');
    for(var i=0; i<sel_01_al.length; i++) {
        sel1.push('<option value="'+sel_01_al[i].value+'">'+sel_01_al[i].text+'</option>');
    }

    $('#sel_01_Id').html(sel1.join(''));
    $('#sel_01_Id').change(function(){
        calcPrice();
    });

    var sel2 = new Array();
    sel2.push('<option value="">선택</option>');
    for(var i=0; i<sel_02_al.length; i++) {
        sel2.push('<option value="'+sel_02_al[i].value+'">'+sel_02_al[i].text+'</option>');
    }

    $('#sel_02_Id').html(sel2.join(''));
    $('#sel_02_Id').change(function(){
        calcPrice();
    });
});

function calcPrice() {
    var price = Number($('#sel_01_Id').val());
    var qut   = Number($('#sel_02_Id').val());
    if(price>0 && qut>0) {
        $('#dispId').html((String(price*qut)).comma());
    } else {
        $('#dispId').html('');
    }
}

String.prototype.comma = Number.prototype.comma = function() {
    var n = String(this).replace(/\,/g,'');
    return n.match(RegExp('^[0-9]{'+(n.length%3||3)+'}|[0-9]{3}','g')).join();
};

//]]>
</script>
    </head>
    <body>

        <select id='sel_01_Id'></select>
        <select id='sel_02_Id'></select>
        <div id='dispId'></div>

    </body>
</html>


----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
[ Regular Expression ]
----------------------------------------------------------------------------------------------------

1. Username Regular Expression Pattern

package com.mkyong.regex;

import java.util.regex.Matcher;
import java.util.regex.Pattern;

public class UsernameValidator{

      private Pattern pattern;
      private Matcher matcher;

      private static final String USERNAME_PATTERN = "^[a-z0-9_-]{3,15}$";

      public UsernameValidator(){
          pattern = Pattern.compile(USERNAME_PATTERN);
      }

      /**
       * Validate username with regular expression
       * @param username username for validation
       * @return true valid username, false invalid username
       */
      public boolean validate(final String username){

          matcher = pattern.matcher(username);
          return matcher.matches();

      }
}

package com.mkyong.regex;

import org.testng.Assert;
import org.testng.annotations.*;

/**
 * Username validator Testing
 * @author mkyong
 *
 */
public class UsernameValidatorTest {

    private UsernameValidator usernameValidator;

    @BeforeClass
        public void initData(){
        usernameValidator = new UsernameValidator();
        }

    @DataProvider
    public Object[][] ValidUsernameProvider() {
        return new Object[][]{
           {new String[] {
                 "mkyong34", "mkyong_2002","mkyong-2002" ,"mk3-4_yong"
           }}
                };
    }

    @DataProvider
    public Object[][] InvalidUsernameProvider() {
        return new Object[][]{
           {new String[] {
             "mk","mk@yong","mkyong123456789_-"
           }}
            };
    }

    @Test(dataProvider = "ValidUsernameProvider")
    public void ValidUsernameTest(String[] Username) {

       for(String temp : Username){
        boolean valid = usernameValidator.validate(temp);
        System.out.println("Username is valid : " + temp + " , " + valid);
        Assert.assertEquals(true, valid);
       }

    }

    @Test(dataProvider = "InvalidUsernameProvider",
                 dependsOnMethods="ValidUsernameTest")
    public void InValidUsernameTest(String[] Username) {

       for(String temp : Username){
        boolean valid = usernameValidator.validate(temp);
        System.out.println("username is valid : " + temp + " , " + valid);
        Assert.assertEquals(false, valid);
       }

    }
}




----------------------------------------------------------------------------------------------------

2. Password Regular Expression Pattern

(           # Start of group
  (?=.*\d)      #   must contains one digit from 0-9
  (?=.*[a-z])       #   must contains one lowercase characters
  (?=.*[A-Z])       #   must contains one uppercase characters
  (?=.*[@#$%])      #   must contains one special symbols in the list "@#$%"
              .     #     match anything with previous condition checking
                {6,20}  #        length at least 6 characters and maximum of 20
)           # End of group


package com.mkyong.regex;

import java.util.regex.Matcher;
import java.util.regex.Pattern;

public class PasswordValidator{

      private Pattern pattern;
      private Matcher matcher;

      private static final String PASSWORD_PATTERN =
              "((?=.*\\d)(?=.*[a-z])(?=.*[A-Z])(?=.*[@#$%]).{6,20})";

      public PasswordValidator(){
          pattern = Pattern.compile(PASSWORD_PATTERN);
      }

      /**
       * Validate password with regular expression
       * @param password password for validation
       * @return true valid password, false invalid password
       */
      public boolean validate(final String password){

          matcher = pattern.matcher(password);
          return matcher.matches();

      }
}

package com.mkyong.regex;

import org.testng.Assert;
import org.testng.annotations.*;

/**
 * Password validator Testing
 * @author mkyong
 *
 */
public class PasswordValidatorTest {

    private PasswordValidator passwordValidator;

    @BeforeClass
        public void initData(){
        passwordValidator = new PasswordValidator();
        }

    @DataProvider
    public Object[][] ValidPasswordProvider() {
        return new Object[][]{
           {new String[] {
               "mkyong1A@", "mkYOn12$",
           }}
            };
    }

    @DataProvider
    public Object[][] InvalidPasswordProvider() {
        return new Object[][]{
           {new String[] {
               "mY1A@","mkyong12@","mkyoNg12*",
                            "mkyonG$$","MKYONG12$"
           }}
           };
    }

    @Test(dataProvider = "ValidPasswordProvider")
    public void ValidPasswordTest(String[] password) {

       for(String temp : password){
        boolean valid = passwordValidator.validate(temp);
        System.out.println("Password is valid : " + temp + " , " + valid);
        Assert.assertEquals(true, valid);
       }

    }

    @Test(dataProvider = "InvalidPasswordProvider",
                 dependsOnMethods="ValidPasswordTest")
    public void InValidPasswordTest(String[] password) {

       for(String temp : password){
        boolean valid = passwordValidator.validate(temp);
        System.out.println("Password is valid : " + temp + " , " + valid);
        Assert.assertEquals(false, valid);
       }
    }
}



----------------------------------------------------------------------------------------------------

3. Hexadecimal Color Code Regular Expression Pattern

^        #start of the line
 #       #  must constains a "#" symbols
 (       #  start of group #1
  [A-Fa-f0-9]{6} #    any strings in the list, with length of 6
  |      #    ..or
  [A-Fa-f0-9]{3} #    any strings in the list, with length of 3
 )       #  end of group #1
$        #end of the line

package com.mkyong.regex;

import java.util.regex.Matcher;
import java.util.regex.Pattern;

public class HexValidator{

   private Pattern pattern;
   private Matcher matcher;

   private static final String HEX_PATTERN = "^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$";

   public HexValidator(){
      pattern = Pattern.compile(HEX_PATTERN);
   }

   /**
   * Validate hex with regular expression
   * @param hex hex for validation
   * @return true valid hex, false invalid hex
   */
   public boolean validate(final String hex){

      matcher = pattern.matcher(hex);
      return matcher.matches();

   }
}

package com.mkyong.regex;

import org.testng.Assert;
import org.testng.annotations.*;

/**
 * Hex validator Testing
 * @author mkyong
 *
 */
public class HexValidatorTest {

    private HexValidator hexValidator;

    @BeforeClass
        public void initData(){
        hexValidator = new HexValidator();
        }

    @DataProvider
    public Object[][] ValidHexProvider() {
        return new Object[][]{
               {new String[] {
                "#1f1f1F", "#AFAFAF","#1AFFa1","#222fff", "#F00"
               }}
        };
    }

    @DataProvider
    public Object[][] InvalidHexProvider() {
        return new Object[][]{
            {new String[] {
                   "123456","#afafah","#123abce","aFaE3f",
                   "F00","#afaf", "#F0h"
                }}
        };
    }

    @Test(dataProvider = "ValidHexProvider")
    public void ValidHexTest(String[] hex) {

       for(String temp : hex){
           boolean valid = hexValidator.validate(temp);
           System.out.println("Hex is valid : " + temp + " , " + valid);
           Assert.assertEquals(true, valid);
       }

    }

    @Test(dataProvider = "InvalidHexProvider", dependsOnMethods="ValidHexTest")
    public void InValidHexTest(String[] hex) {

       for(String temp : hex){
           boolean valid = hexValidator.validate(temp);
           System.out.println("Hex is valid : " + temp + " , " + valid);
           Assert.assertEquals(false, valid);
       }

    }
}


----------------------------------------------------------------------------------------------------

4. Email Regular Expression Pattern

^           #start of the line
  [_A-Za-z0-9-\\+]+ #  must start with string in the bracket [ ], must contains one or more (+)
  (         #   start of group #1
    \\.[_A-Za-z0-9-]+   #     follow by a dot "." and string in the bracket [ ], must contains one or more (+)
  )*            #   end of group #1, this group is optional (*)
    @           #     must contains a "@" symbol
     [A-Za-z0-9-]+      #       follow by string in the bracket [ ], must contains one or more (+)
      (         #         start of group #2 - first level TLD checking
       \\.[A-Za-z0-9]+  #           follow by a dot "." and string in the bracket [ ], must contains one or more (+)
      )*        #         end of group #2, this group is optional (*)
      (         #         start of group #3 - second level TLD checking
       \\.[A-Za-z]{2,}  #           follow by a dot "." and string in the bracket [ ], with minimum length of 2
      )         #         end of group #3
$           #end of the line

package com.mkyong.regex;

import java.util.regex.Matcher;
import java.util.regex.Pattern;

public class EmailValidator {

    private Pattern pattern;
    private Matcher matcher;

    private static final String EMAIL_PATTERN =
        "^[_A-Za-z0-9-\\+]+(\\.[_A-Za-z0-9-]+)*@"
        + "[A-Za-z0-9-]+(\\.[A-Za-z0-9]+)*(\\.[A-Za-z]{2,})$";

    public EmailValidator() {
        pattern = Pattern.compile(EMAIL_PATTERN);
    }

    /**
     * Validate hex with regular expression
     *
     * @param hex
     *            hex for validation
     * @return true valid hex, false invalid hex
     */
    public boolean validate(final String hex) {

        matcher = pattern.matcher(hex);
        return matcher.matches();

    }
}

package com.mkyong.regex;

import org.testng.Assert;
import org.testng.annotations.*;

/**
 * Email validator Testing
 *
 * @author mkyong
 *
 */
public class EmailValidatorTest {

    private EmailValidator emailValidator;

    @BeforeClass
    public void initData() {
        emailValidator = new EmailValidator();
    }

    @DataProvider
    public Object[][] ValidEmailProvider() {
        return new Object[][] { { new String[] { "mkyong@yahoo.com",
            "mkyong-100@yahoo.com", "mkyong.100@yahoo.com",
            "mkyong111@mkyong.com", "mkyong-100@mkyong.net",
            "mkyong.100@mkyong.com.au", "mkyong@1.com",
            "mkyong@gmail.com.com", "mkyong+100@gmail.com",
            "mkyong-100@yahoo-test.com" } } };
    }

    @DataProvider
    public Object[][] InvalidEmailProvider() {
        return new Object[][] { { new String[] { "mkyong", "mkyong@.com.my",
            "mkyong123@gmail.a", "mkyong123@.com", "mkyong123@.com.com",
            ".mkyong@mkyong.com", "mkyong()*@gmail.com", "mkyong@%*.com",
            "mkyong..2002@gmail.com", "mkyong.@gmail.com",
            "mkyong@mkyong@gmail.com", "mkyong@gmail.com.1a" } } };
    }

    @Test(dataProvider = "ValidEmailProvider")
    public void ValidEmailTest(String[] Email) {

        for (String temp : Email) {
            boolean valid = emailValidator.validate(temp);
            System.out.println("Email is valid : " + temp + " , " + valid);
            Assert.assertEquals(valid, true);
        }

    }

    @Test(dataProvider = "InvalidEmailProvider", dependsOnMethods = "ValidEmailTest")
    public void InValidEmailTest(String[] Email) {

        for (String temp : Email) {
            boolean valid = emailValidator.validate(temp);
            System.out.println("Email is valid : " + temp + " , " + valid);
            Assert.assertEquals(valid, false);
        }
    }
}





----------------------------------------------------------------------------------------------------

5. Image File Extension Regular Expression Pattern

(           #Start of the group #1
 [^\s]+         #  must contains one or more anything (except white space)
       (        #    start of the group #2
         \.     #   follow by a dot "."
         (?i)       #   ignore the case sensive checking for the following characters
             (      #     start of the group #3
              jpg   #       contains characters "jpg"
              |     #       ..or
              png   #       contains characters "png"
              |     #       ..or
              gif   #       contains characters "gif"
              |     #       ..or
              bmp   #       contains characters "bmp"
             )      #     end of the group #3
       )        #     end of the group #2
  $         #  end of the string
)           #end of the group #1

package com.mkyong.regex;

import java.util.regex.Matcher;
import java.util.regex.Pattern;

public class ImageValidator{

   private Pattern pattern;
   private Matcher matcher;

   private static final String IMAGE_PATTERN =
                "([^\\s]+(\\.(?i)(jpg|png|gif|bmp))$)";

   public ImageValidator(){
      pattern = Pattern.compile(IMAGE_PATTERN);
   }

   /**
   * Validate image with regular expression
   * @param image image for validation
   * @return true valid image, false invalid image
   */
   public boolean validate(final String image){

      matcher = pattern.matcher(image);
      return matcher.matches();

   }
}

package com.mkyong.regex;

import org.testng.Assert;
import org.testng.annotations.*;

/**
 * Image validator Testing
 * @author mkyong
 *
 */
public class ImageValidatorTest {

    private ImageValidator imageValidator;

    @BeforeClass
        public void initData(){
        imageValidator = new ImageValidator();
        }

    @DataProvider
    public Object[][] ValidImageProvider() {
       return new Object[][]{
             {new String[] {
           "a.jpg", "a.gif","a.png", "a.bmp",
           "..jpg", "..gif","..png", "..bmp",
           "a.JPG", "a.GIF","a.PNG", "a.BMP",
           "a.JpG", "a.GiF","a.PnG", "a.BmP",
           "jpg.jpg", "gif.gif","png.png", "bmp.bmp"
           }
              }
       };
    }

    @DataProvider
    public Object[][] InvalidImageProvider() {
      return new Object[][]{
        {new String[] {
           ".jpg", ".gif",".png",".bmp",
           " .jpg", " .gif"," .png"," .bmp",
                   "a.txt", "a.exe","a.","a.mp3",
           "jpg", "gif","png","bmp"
           }
             }
       };
    }

    @Test(dataProvider = "ValidImageProvider")
     public void ValidImageTest(String[] Image) {

       for(String temp : Image){
           boolean valid = imageValidator.validate(temp);
           System.out.println("Image is valid : " + temp + " , " + valid);
           Assert.assertEquals(true, valid);
       }

    }

    @Test(dataProvider = "InvalidImageProvider",
                 dependsOnMethods="ValidImageTest")
    public void InValidImageTest(String[] Image) {

       for(String temp : Image){
           boolean valid = imageValidator.validate(temp);
           System.out.println("Image is valid : " + temp + " , " + valid);
           Assert.assertEquals(false, valid);
       }
    }
}



----------------------------------------------------------------------------------------------------

6. IP Address Regular Expression Pattern

^       #start of the line
 (      #  start of group #1
   [01]?\\d\\d? #    Can be one or two digits. If three digits appear, it must start either 0 or 1
        #    e.g ([0-9], [0-9][0-9],[0-1][0-9][0-9])
    |       #    ...or
   2[0-4]\\d    #    start with 2, follow by 0-4 and end with any digit (2[0-4][0-9])
    |           #    ...or
   25[0-5]      #    start with 2, follow by 5 and ends with 0-5 (25[0-5])
 )      #  end of group #2
  \.            #  follow by a dot "."
....            # repeat with 3 times (3x)
$       #end of the line

package com.mkyong.regex;

import java.util.regex.Matcher;
import java.util.regex.Pattern;

public class IPAddressValidator{

    private Pattern pattern;
    private Matcher matcher;

    private static final String IPADDRESS_PATTERN =
        "^([01]?\\d\\d?|2[0-4]\\d|25[0-5])\\." +
        "([01]?\\d\\d?|2[0-4]\\d|25[0-5])\\." +
        "([01]?\\d\\d?|2[0-4]\\d|25[0-5])\\." +
        "([01]?\\d\\d?|2[0-4]\\d|25[0-5])$";

    public IPAddressValidator(){
      pattern = Pattern.compile(IPADDRESS_PATTERN);
    }

   /**
    * Validate ip address with regular expression
    * @param ip ip address for validation
    * @return true valid ip address, false invalid ip address
    */
    public boolean validate(final String ip){
      matcher = pattern.matcher(ip);
      return matcher.matches();
    }
}

package com.mkyong.regex;

import org.testng.Assert;
import org.testng.annotations.*;

/**
 * IPAddress validator Testing
 * @author mkyong
 *
 */
public class IPAddressValidatorTest {

    private IPAddressValidator ipAddressValidator;

    @BeforeClass
        public void initData(){
        ipAddressValidator = new IPAddressValidator();
        }

    @DataProvider
    public Object[][] ValidIPAddressProvider() {
        return new Object[][]{
           new Object[] {"1.1.1.1"},new Object[] {"255.255.255.255"},
                   new Object[] {"192.168.1.1"},new Object[] {"10.10.1.1"},
                   new Object[] {"132.254.111.10"},new Object[] {"26.10.2.10"},
           new Object[] {"127.0.0.1"}
        };
    }

    @DataProvider
    public Object[][] InvalidIPAddressProvider() {
        return new Object[][]{
           new Object[] {"10.10.10"},new Object[] {"10.10"},
                   new Object[] {"10"},new Object[] {"a.a.a.a"},
                   new Object[] {"10.0.0.a"},new Object[] {"10.10.10.256"},
           new Object[] {"222.222.2.999"},new Object[] {"999.10.10.20"},
                   new Object[] {"2222.22.22.22"},new Object[] {"22.2222.22.2"},
                   new Object[] {"10.10.10"},new Object[] {"10.10.10"},
        };
    }

    @Test(dataProvider = "ValidIPAddressProvider")
    public void ValidIPAddressTest(String ip) {
           boolean valid = ipAddressValidator.validate(ip);
           System.out.println("IPAddress is valid : " + ip + " , " + valid);
           Assert.assertEquals(true, valid);
    }

    @Test(dataProvider = "InvalidIPAddressProvider",
                 dependsOnMethods="ValidIPAddressTest")
    public void InValidIPAddressTest(String ip) {
           boolean valid = ipAddressValidator.validate(ip);
           System.out.println("IPAddress is valid : " + ip + " , " + valid);
           Assert.assertEquals(false, valid);
    }
}



----------------------------------------------------------------------------------------------------

7. Time Format Regular Expression Pattern

(               #start of group #1
 1[012]             #  start with 10, 11, 12
 |              #  or
 [1-9]              #  start with 1,2,...9
)               #end of group #1
 :              #    follow by a semi colon (:)
  [0-5][0-9]            #      follw by 0..5 and 0..9, which means 00 to 59
            (\\s)?      #        follow by a white space (optional)
                  (?i)      #          next checking is case insensitive
                      (am|pm)   #            follow by am or pm


package com.mkyong.regex;

import java.util.regex.Matcher;
import java.util.regex.Pattern;

public class Time12HoursValidator{

      private Pattern pattern;
      private Matcher matcher;

      private static final String TIME12HOURS_PATTERN =
                                "(1[012]|[1-9]):[0-5][0-9](\\s)?(?i)(am|pm)";

      public Time12HoursValidator(){
          pattern = Pattern.compile(TIME12HOURS_PATTERN);
      }

      /**
       * Validate time in 12 hours format with regular expression
       * @param time time address for validation
       * @return true valid time fromat, false invalid time format
       */
      public boolean validate(final String time){
          matcher = pattern.matcher(time);
          return matcher.matches();
      }
}

package com.mkyong.regex;

import org.testng.Assert;
import org.testng.annotations.*;

/**
 * Time 12 hours format validator Testing
 * @author mkyong
 *
 */
public class Time12HoursValidatorTest {

    private Time12HoursValidator time12HoursValidator;

    @BeforeClass
        public void initData(){
        time12HoursValidator = new Time12HoursValidator();
        }

    @DataProvider
    public Object[][] ValidTime12HoursProvider() {
        return new Object[][]{
             new Object[] {"1:00am"}, new Object[] {"1:00 am"},
                     new Object[] {"1:00 AM"}, new Object[] {"1:00pm"},
                     new Object[] {"1:00 pm"},new Object[] {"1:00 PM"},
             new Object[] {"12:50 pm"}
        };
    }

    @DataProvider
    public Object[][] InvalidTime12HoursProvider() {
        return new Object[][]{
             new Object[] {"0:00 am"},new Object[] {"10:00  am"},
             new Object[] {"1:00"},new Object[] {"23:00 am"},
             new Object[] {"1:61 pm"},new Object[] {"13:00 pm"},
             new Object[] {"001:50 pm"},new Object[] {"10:99 am"},
             new Object[] {"01:00 pm"}, new Object[] {"1:00 bm"}
        };
    }

    @Test(dataProvider = "ValidTime12HoursProvider")
    public void ValidTime12HoursTest(String time) {
       boolean valid = time12HoursValidator.validate(time);
       System.out.println("Time12Hours is valid : " + time + " , " + valid);
       Assert.assertEquals(true, valid);
    }

    @Test(dataProvider = "InvalidTime12HoursProvider",
                 dependsOnMethods="ValidTime12HoursTest")
    public void InValidTime12HoursTest(String time) {
       boolean valid = time12HoursValidator.validate(time);
       System.out.println("Time12Hours is valid : " + time + " , " + valid);
       Assert.assertEquals(false, valid);
    }
}



----------------------------------------------------------------------------------------------------

8. Date Format(dd/mm/yyyy) Regular Expression Pattern

(           #start of group #1
 0?[1-9]        #  01-09 or 1-9
 |                      #  ..or
 [12][0-9]      #  10-19 or 20-29
 |          #  ..or
 3[01]          #  30, 31
)           #end of group #1
  /         #  follow by a "/"
   (            #    start of group #2
    0?[1-9]     #   01-09 or 1-9
    |           #   ..or
    1[012]      #   10,11,12
    )           #    end of group #2
     /          #   follow by a "/"
      (         #     start of group #3
       (19|20)\\d\\d    #       19[0-9][0-9] or 20[0-9][0-9]
       )        #     end of group #3

package com.mkyong.regex;

import java.util.regex.Matcher;
import java.util.regex.Pattern;

public class DateValidator{

  private Pattern pattern;
  private Matcher matcher;

  private static final String DATE_PATTERN =
          "(0?[1-9]|[12][0-9]|3[01])/(0?[1-9]|1[012])/((19|20)\\d\\d)";

  public DateValidator(){
      pattern = Pattern.compile(DATE_PATTERN);
  }

  /**
   * Validate date format with regular expression
   * @param date date address for validation
   * @return true valid date fromat, false invalid date format
   */
   public boolean validate(final String date){

     matcher = pattern.matcher(date);

     if(matcher.matches()){

     matcher.reset();

     if(matcher.find()){

             String day = matcher.group(1);
         String month = matcher.group(2);
         int year = Integer.parseInt(matcher.group(3));

         if (day.equals("31") &&
          (month.equals("4") || month .equals("6") || month.equals("9") ||
                  month.equals("11") || month.equals("04") || month .equals("06") ||
                  month.equals("09"))) {
            return false; // only 1,3,5,7,8,10,12 has 31 days
         } else if (month.equals("2") || month.equals("02")) {
                  //leap year
          if(year % 4==0){
              if(day.equals("30") || day.equals("31")){
                  return false;
              }else{
                  return true;
              }
          }else{
                 if(day.equals("29")||day.equals("30")||day.equals("31")){
                  return false;
                 }else{
                  return true;
              }
          }
          }else{
        return true;
          }
       }else{
              return false;
       }
     }else{
      return false;
     }
   }
}

package com.mkyong.regex;

import org.testng.Assert;
import org.testng.annotations.*;

/**
 * Date format dd/mm/yyyy validator Testing
 * @author mkyong
 *
 */
public class DateValidatorTest {

    private DateValidator dateValidator;

    @BeforeClass
        public void initData(){
        dateValidator = new DateValidator();
        }

    @DataProvider
    public Object[][] ValidDateProvider() {
        return new Object[][]{
            new Object[] {"1/1/2010"}, new Object[] {"01/01/2020"},
            new Object[] {"31/1/2010"}, new Object[] {"31/01/2020"},
            new Object[] {"29/2/2008"}, new Object[] {"29/02/2008"},
            new Object[] {"28/2/2009"}, new Object[] {"28/02/2009"},
            new Object[] {"31/3/2010"}, new Object[] {"31/03/2010"},
            new Object[] {"30/4/2010"}, new Object[] {"30/04/2010"},
            new Object[] {"31/5/2010"}, new Object[] {"31/05/2010"},
            new Object[] {"30/6/2010"}, new Object[] {"30/06/2010"},
            new Object[] {"31/7/2010"}, new Object[] {"31/07/2010"},
            new Object[] {"31/8/2010"}, new Object[] {"31/08/2010"},
            new Object[] {"30/9/2010"}, new Object[] {"30/09/2010"},
            new Object[] {"31/10/2010"}, new Object[] {"31/10/2010"},
            new Object[] {"30/11/2010"}, new Object[] {"30/11/2010"},
            new Object[] {"31/12/2010"}, new Object[] {"31/12/2010"}
        };
    }

    @DataProvider
    public Object[][] InvalidDateProvider() {
        return new Object[][]{
            new Object[] {"32/1/2010"}, new Object[] {"32/01/2020"},
            new Object[] {"1/13/2010"}, new Object[] {"01/01/1820"},
            new Object[] {"29/2/2007"}, new Object[] {"29/02/2007"},
            new Object[] {"30/2/2008"}, new Object[] {"31/02/2008"},
            new Object[] {"29/a/2008"}, new Object[] {"a/02/2008"},
            new Object[] {"333/2/2008"}, new Object[] {"29/02/200a"},
            new Object[] {"31/4/2010"}, new Object[] {"31/04/2010"},
            new Object[] {"31/6/2010"}, new Object[] {"31/06/2010"},
            new Object[] {"31/9/2010"}, new Object[] {"31/09/2010"},
            new Object[] {"31/11/2010"}
        };
    }

    @Test(dataProvider = "ValidDateProvider")
    public void ValidDateTest(String date) {
        boolean valid = dateValidator.validate(date);
        System.out.println("Date is valid : " + date + " , " + valid);
        Assert.assertEquals(true, valid);
    }

    @Test(dataProvider = "InvalidDateProvider",
                 dependsOnMethods="ValidDateTest")
    public void InValidDateTest(String date) {
        boolean valid = dateValidator.validate(date);
        System.out.println("Date is valid : " + date + " , " + valid);
        Assert.assertEquals(false, valid);
    }
}


----------------------------------------------------------------------------------------------------

9. HTML tag Regular Expression Pattern

<       #start with opening tag "<"
 (      #   start of group #1
   "[^"]*"  #   allow string with double quotes enclosed - "string"
   |        #   ..or
   '[^']*'  #   allow string with single quote enclosed - 'string'
   |        #   ..or
   [^'">]   #   cant contains one single quotes, double quotes and ">"
 )      #   end of group #1
 *      # 0 or more
>       #end with closing tag ">"


package com.mkyong.regex;

import java.util.regex.Matcher;
import java.util.regex.Pattern;

public class HTMLTagValidator{

   private Pattern pattern;
   private Matcher matcher;

   private static final String HTML_TAG_PATTERN = "<(\"[^\"]*\"|'[^']*'|[^'\">])*>";

   public HTMLTagValidator(){
      pattern = Pattern.compile(HTML_TAG_PATTERN);
   }

  /**
   * Validate html tag with regular expression
   * @param tag html tag for validation
   * @return true valid html tag, false invalid html tag
   */
  public boolean validate(final String tag){

      matcher = pattern.matcher(tag);
      return matcher.matches();

  }
}

package com.mkyong.regex;

import org.testng.Assert;
import org.testng.annotations.*;

/**
 * HTMLTag validator Testing
 * @author mkyong
 *
 */
public class HTMLTagValidatorTest {

    private HTMLTagValidator htmlTagValidator;

    @BeforeClass
        public void initData(){
        htmlTagValidator = new HTMLTagValidator();
        }

    @DataProvider
    public Object[][] ValidHTMLTagProvider() {
           return new Object[][]{
           new Object[] {"<b>"},
                   new Object[] {"<input value='>'>"},
           new Object[] {"<input value='<'>"},
           new Object[] {"<b/>"},
                   new Object[] {"<a href='http://www.google.com'>"},
           new Object[] {"<br>"},
                   new Object[] {"<br/>"},
           new Object[] {"<input value=\"\" id='test'>"},
                   new Object[] {"<input value='' id='test'>"}
       };
    }

    @DataProvider
    public Object[][] InvalidHTMLTagProvider() {
        return new Object[][]{
          new Object[] {"<input value=\" id='test'>"},
          new Object[] {"<input value=' id='test'>"},
          new Object[] {"<input value=> >"}
        };
    }

    @Test(dataProvider = "ValidHTMLTagProvider")
    public void ValidHTMLTagTest(String tag) {

        boolean valid = htmlTagValidator.validate(tag);
        System.out.println("HTMLTag is valid : " + tag + " , " + valid);
        Assert.assertEquals(true, valid);

    }

    @Test(dataProvider = "InvalidHTMLTagProvider",
                 dependsOnMethods="ValidHTMLTagTest")
    public void InValidHTMLTagTest(String tag) {

       boolean valid = htmlTagValidator.validate(tag);
       System.out.println("HTMLTag is valid : " + tag + " , " + valid);
       Assert.assertEquals(false, valid);

    }
}



----------------------------------------------------------------------------------------------------

10. HTML links Regular Expression Pattern

(       #start of group #1
 ?i     #  all checking are case insensive
)       #end of group #1
<a              #start with "<a"
  (     #  start of group #2
    [^>]+   #     anything except (">"), at least one character
   )        #  end of group #2
  >     #     follow by ">"
    (.+?)   #   match anything
         </a>   #     end with "</a>

\s*            #can start with whitespace
  (?i)             # all checking are case insensive
     href          #  follow by "href" word
        \s*=\s*        #   allows spaces on either side of the equal sign,
              (        #    start of group #1
               "([^"]*")   #      allow string with double quotes enclosed - "string"
               |       #      ..or
               '[^']*'     #        allow string with single quotes enclosed - 'string'
               |           #      ..or
               ([^'">]+)   #      can't contains one single quotes, double quotes ">"
          )        #    end of group #1

package com.mkyong.crawler.core;

import java.util.Vector;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

public class HTMLLinkExtractor {

    private Pattern patternTag, patternLink;
    private Matcher matcherTag, matcherLink;

    private static final String HTML_A_TAG_PATTERN = "(?i)<a([^>]+)>(.+?)</a>";
    private static final String HTML_A_HREF_TAG_PATTERN =
        "\\s*(?i)href\\s*=\\s*(\"([^\"]*\")|'[^']*'|([^'\">\\s]+))";


    public HTMLLinkExtractor() {
        patternTag = Pattern.compile(HTML_A_TAG_PATTERN);
        patternLink = Pattern.compile(HTML_A_HREF_TAG_PATTERN);
    }

    /**
     * Validate html with regular expression
     *
     * @param html
     *            html content for validation
     * @return Vector links and link text
     */
    public Vector<HtmlLink> grabHTMLLinks(final String html) {

        Vector<HtmlLink> result = new Vector<HtmlLink>();

        matcherTag = patternTag.matcher(html);

        while (matcherTag.find()) {

            String href = matcherTag.group(1); // href
            String linkText = matcherTag.group(2); // link text

            matcherLink = patternLink.matcher(href);

            while (matcherLink.find()) {

                String link = matcherLink.group(1); // link
                HtmlLink obj = new HtmlLink();
                obj.setLink(link);
                obj.setLinkText(linkText);

                result.add(obj);

            }

        }

        return result;

    }

    class HtmlLink {

        String link;
        String linkText;

        HtmlLink(){};

        @Override
        public String toString() {
            return new StringBuffer("Link : ").append(this.link)
            .append(" Link Text : ").append(this.linkText).toString();
        }

        public String getLink() {
            return link;
        }

        public void setLink(String link) {
            this.link = replaceInvalidChar(link);
        }

        public String getLinkText() {
            return linkText;
        }

        public void setLinkText(String linkText) {
            this.linkText = linkText;
        }

        private String replaceInvalidChar(String link){
            link = link.replaceAll("'", "");
            link = link.replaceAll("\"", "");
            return link;
        }

    }
}

package com.mkyong.crawler.core;

import java.util.Vector;

import org.testng.Assert;
import org.testng.annotations.BeforeClass;
import org.testng.annotations.DataProvider;
import org.testng.annotations.Test;

import com.mkyong.crawler.core.HTMLLinkExtractor.HtmlLink;

/**
 * HTML link extrator Testing
 *
 * @author mkyong
 *
 */
public class TestHTMLLinkExtractor {

    private HTMLLinkExtractor htmlLinkExtractor;
    String TEST_LINK = "http://www.google.com";

    @BeforeClass
    public void initData() {
        htmlLinkExtractor = new HTMLLinkExtractor();
    }

    @DataProvider
    public Object[][] HTMLContentProvider() {
      return new Object[][] {
        new Object[] { "abc hahaha <a href='" + TEST_LINK + "'>google</a>" },
        new Object[] { "abc hahaha <a HREF='" + TEST_LINK + "'>google</a>" },

        new Object[] { "abc hahaha <A HREF='" + TEST_LINK + "'>google</A> , "
        + "abc hahaha <A HREF='" + TEST_LINK + "' target='_blank'>google</A>" },

        new Object[] { "abc hahaha <A HREF='" + TEST_LINK + "' target='_blank'>google</A>" },
        new Object[] { "abc hahaha <A target='_blank' HREF='" + TEST_LINK + "'>google</A>" },
        new Object[] { "abc hahaha <A target='_blank' HREF=\"" + TEST_LINK + "\">google</A>" },
        new Object[] { "abc hahaha <a HREF=" + TEST_LINK + ">google</a>" }, };
    }

    @Test(dataProvider = "HTMLContentProvider")
    public void ValidHTMLLinkTest(String html) {

        Vector<HtmlLink> links = htmlLinkExtractor.grabHTMLLinks(html);

        //there must have something
        Assert.assertTrue(links.size() != 0);

        for (int i = 0; i < links.size(); i++) {
            HtmlLink htmlLinks = links.get(i);
            //System.out.println(htmlLinks);
            Assert.assertEquals(htmlLinks.getLink(), TEST_LINK);
        }

    }
}



----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------

    private static void test04(String[] args) throws Exception {

        Map<String,String> mapWord = new HashMap<String,String>();
        String ptn = "%([a-zA-Z0-9]{3,})%";
        String str = "정규표현%HELLO%식은 검색해 보%TIME%시면 아시%ID%겠지만 문자%ID01%열에서 특정 패턴을 이용해...";
        StringBuffer sb = new StringBuffer();

        if (flag) {
            mapWord.put("%HELLO%  ".trim(), "안녕하세요.");
            mapWord.put("%TIME%   ".trim(), "시간은");
            mapWord.put("%ID01%   ".trim(), "C123456ABC34D45E");
        }

        if (flag) {

            Pattern pattern = Pattern.compile(ptn);
            Matcher matcher = pattern.matcher(str);

            while (matcher.find()) {
                String key = matcher.group();
                String grp1 = matcher.group(1);
                String value = mapWord.get(key);
                if (value == null)
                    value = "";

                matcher.appendReplacement(sb, "[" + grp1 + "->" + value + "]");
            }

            System.out.println("> " + sb.toString());
        }
    }


----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
[ oracle CLOB 자료 ]

JDBC에서 Connection 처리 후  CLOB 쓸 때

    String sql = "insert into TABLE values (?,?,?)";
    PreparedStatement pstmt = connection.prepareStatement(sql);

    pstmt.setInt(1, 1234);
    pstmt.setCharacterStream(2, new StringReader(some_string, some_string.length());
    pstmt.setString(3, "Hello");
    pstmt.execute();

읽을 때

    public static String readClobData(Reader reader) throws IOException {
        StringBuffer sb = new StringBuffer();
        char[] buf = new char[1024];
        int cnt = 0;
        if (reader != null) {
            while ((cnt = reader.read(buf)) != -1) {
                sb.append(buf, 0, cnt);
            }
        }
        return sb.toString();
    }

    ResultSet rs = #####
    String clobString = readClobData(rs.getCharacterStream("clob_column"));

----------------------------------------------------------------------------------------------------

    sr0 = new java.io.StringReader(dataBean.getContent());
    pstmt.setCharacterStream(1, sr0, dataBean.getContent().length());

----------------------------------------------------------------------------------------------------
[ iBatis + CLOB ]

일단 clob을 집어넣고 뺄때 ibatis에 알려줘야했었던거다 ㅡㅡ;
셀렉트문... 먼저 resultMap을 셀렉트 하기전에 선언해줘야한다;; 왜냐면 XML은 순차적으로 해석하기때문에... 먼저 해줘야 나중에있는놈이 쓸수있는거다.
그리고 CONTENT를 보면 알겠지만 jdbcType와 javaType를 정의해주었다..

XML의 내용이다..

<resultMap id="viewIncClob" class="hmap">
  <result property="BBS_ORDER" column="BBS_ORDER"/>
  <result property="TITLE" column="TITLE"/>
  <result property="FIRSTREGDATE" column="FIRSTREGDATE"/>
  <result property="WRITER" column="WRITER"/>
  <result property="CONTENT" column="CONTENT" jdbcType="CLOB" javaType="java.lang.String"/>
 </resultMap>

셀렉트문에서는 만들어놓은 resultMap을 사용해준다.
 <select id="viewNotice" parameterClass="hmap" resultMap="viewIncClob">
  <![CDATA[
   SELECT BBS_ORDER, TITLE, TO_CHAR(FIRSTREGDATE,'YYYY-MM-DD') AS FIRSTREGDATE, WRITER,
          CONTENT
     FROM DPSCMM005
    WHERE BBS_ORDER = #bbs_order#
  ]]>
 </select>

인서트문이다.업데이트문도 동일하겠지?
파라미터 맵을 만들어준다.  지금 하는 프로젝트는 해쉬맵으로 넘겨주니까 클래스는 지정해놓은 해쉬맵으로 받고...
CLOB 파라미터는 jdbcType를 CLOB 으로 지정해준다..

 <parameterMap id="insertIncClob" class="hmap">
  <parameter property="title"/>
  <parameter property="writer"/>
  <parameter property="content" jdbcType="CLOB"/>
  <parameter property="bbskubun"/>
 </parameterMap>

그리고 인서트문에서도 해줘야 하는데 위에처럼 파라미터 맵을 만들어서 해도 되고. CLOB 필드만 CLOB으로 선언해서 넣을수가있다..
별다른 이유가 없다면 그냥 바로 CLOB으로 집어넣는게 편하겠지..

 <insert id="InsNotice" parameterClass="hmap">
  <![CDATA[
    INSERT INTO DPSCMM005 (
    BBS_ORDER,
    TITLE,
    WRITER,
    CONTENT,
    BBSKUBUN,
    FIRSTREGDATE,
    FINALCHNGDATE,
    FINALCHNGADDR,
    DATASTTCD
   ) VALUES (
        (SELECT NVL(MAX(BBS_ORDER),0)+1 FROM DPSCMM005),
        #title#,
        #writer#,
        #content:CLOB#,                              <------------- 넘어온 파라미터값 뒤에 :CLOB를 붙여주면 CLOB으로 들어간다~!
        #bbskubun#,
        SYSDATE,
        TO_DATE(#wdate#, 'YYYY-MM-DD'),
        #clientIP#,
        '0')
  ]]>
 </insert>

ibatis를 쓰지 않는다면 dbms_lob를 써서 불러와야한다. 물론 ibatis를 쓴다면 그냥 CONTENT만 불러오면 된다 ^^
select dbms_lob.substr(content, dbms_lob.getlength(content), 1) as CONTENT from dpscmm005 where bbs_order = '56'---비교적 간단한듯...

----------------------------------------------------------------------------------------------------

ibatis에서 Oracle의 CLOB을 쓰기위해서는 아래와 같은 별도 resultMap 생성이 필요의 처리가 필요하다

<resultMap id="brdView" class="java.util.HashMap">
        <result property="seq" column="seq"/>
        <result property="title" column="title"/>
        <result property="contents" column="contents" jdbcType="CLOB" javaType="java.lang.String"/>
        <result property="url" column="url"/>
</resultMap>

<select id="test.dao.selectTable" parameterClass="Map" resultMap="brdView">
select
        seq, title, contents, url
from testTable
</select>

* select ibatis 의 resultMap 에 위에서 선언한 brdView 를 세팅한다
* CLOB column 부분 을 잘 세팅할것
* 혹시 검색 쿼리에 column 이 추가될 경우 brdView 에도 같은 명칭으로 추가

EX) addcolumn 란 컬럼이 추가된경우 아래와 같다
<resultMap id="brdView" class="java.util.HashMap">
        <result property="seq" column="seq"/>
        <result property="title" column="title"/>
        <result property="contents" column="contents" jdbcType="CLOB" javaType="java.lang.String"/>
        <result property="url" column="url"/>
        <result property="addcolumn" column="addcolumn"/>
</resultMap>

<select id="test.dao.selectTable" parameterClass="Map" resultMap="brdView">
select
        seq, title, contents, url, addcolumn
from testTable
</select>
[출처] ibatis Oracle clob 처리하기 (하늘 Java) |작성자 프라임

----------------------------------------------------------------------------------------------------
< Bean >
package netville.knowledge.business.model;

import java.io.Serializable;

public class Report implements Serializable {
    private static final long serialVersionUID = ####L;

    protected String id;
    protected String name;
    protected String description;
    protected byte[] data;

    public String getId() {
        return id;
    }

    public void setId(String id) {
        this.id = id;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public String getDescription() {
        return description;
    }

    public void setDescription(String description) {
        this.description = description;
    }

    public byte[] getData() {
        return data;
    }

    public void setData(byte[] data) {
        this.data = data;
    }
}

< Service >
public Report getReport(String id) {
    try {
        return attachmentDAO.getReport(id);
    } catch (Exception e) {
        logger.error(e);
        throw new KnowRuntimeException(e);
    }
}

< DAO >
public Report getReport(String id) {
    return (Report) getSqlMapClientTemplate().queryForObject("knowledge.attachment.getReport", id);
}

public void insertReport(Report report) {
    getSqlMapClientTemplate().insert("knowledge.attachment.insertReport", report);
}


< SQL-MAP >
    <typeAlias alias="report" type="netville.knowledge.business.model.Report" />
    <resultMap class="report" id="report-result">
        <result column="id" porperty="id"/>
        <result column="name" property="name"/>
        <result column="description" property="description"/>
        <result column="data" property="data" jdbcType="BLOB"/>
    </resultMap>
    <insert id="insertReport" parameterClass="report">
        INSERT INTO REPORT
        (
            ID,
            NAME,
            DESCRIPTION,
            DATA
        ) VALUES (
            #id#,
            #name#,
            #description#,
            #data#
        )
    </insert>
    <select id="getReport" parameterClass="string" resultMap="report-result">
        SELECT
            *
        FROM
            REPORT
        WHERE
            ID = #value#
    </select>

<UTIL>
    public static byte[] getBytesFromFile(File file) throws IOException {

        InputStream is = new FileInputStream(file);

        long length = file.length();
        if (length > Integer.MAX_VALUE) {
            return null;
        }

        byte[] bytes = new byte[(int) length];

        int offset = 0;
        int numRead = 0;
        while (offset < bytes.length && (numRead = is.read(bytes, offset, bytes.length - offset)) >= 0) {
            offset += numRead;
        }

        if (offset < bytes.length) {
            throw new IOException("Could not completely read file " + file.getName());
        }

        is.close();

        return bytes;
    }

----------------------------------------------------------------------------------------------------

    <resultMap class="java.util.HashMap" id="resultStone">
        <result column="CONTENT" property="CONTENT" jdbcType="CLOB" javaType="java.lang.String"/>
    </resultMap>
    <select id="getMap" resultMap="resultStone" parameterClass="map">
        SELECT CONTENT FROM TABLE
    </select>


    <!-- CLOB Data를 위한 정의 -->
    <resultMap class="hmap">
        <result column="CONTENT" property="CONTENT" typeHandler="clobHandler"/>
    </resultMap>
    <select id="getBoardDetail" parameterClass="map" resultMap="getClobBoardData">
        TITLE, CONTENT FROM TEX_BULLETIN
        <iterate prepend="IN" property="listId" open="(" close=")" conjunction=",">
            #listId[]#
        </iterate>
    </select>

----------------------------------------------------------------------------------------------------

        // insert 하는 코드 예제
        params = new HashMap<String, Object>();
        params.put("retryTable", retryQName);
        params.put("file_id", message.getMessageId());
        params.put("source_type", getMessageTypeName(message.getSourceType()));
        params.put("msg_file", defalte(encode(message.getValue())));
        sqlMap.insert("insertToRetryQTable", params);

        // SQL-Map
        <insert id="insertToRetryQTable" parameterClass="java.util.Map">
            INSERT INTO $retryTable$ (FILE_ID, SOURCE_TYPE, MSG_FILE) VALUES (#file_id#, #source_type#, #msg_file:BLOB# )
        </insert>

    위 예제코드는 Oracle이나 CUBRID에서는 동작하지 않는다. byte 배열을 BLOB으로 바인딩할 수 없기 때문이다.
    따라서 아래와 같이 TypeHandler에서 setParameter 메소드를 구현해야 한다.

        // ps는 PreparedStatement 객체
        @Override
        public void setParameter(PreparedStatement ps, int i, Object parameter, String jdbcType) throws Exception {
            byte[] bytes = (byte[]) parameter;
            if (bytes != null) {
                Blob blob = ps.getConnection().createBlob();
                blob.setBytes(1, bytes);
                ps.setBlob(i, blob);
            } else {
                ps.setBlob(i, (Blob) null);
            }
        }


----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
[ Linux 메모리 사용량 확인 ]

    top에서 리눅스 시스템의 메모리 사용량을 보면 항상 대부분의 메모리가 사용중이고, free 메모리는 얼마되지 않는다.

        <app01>

            matcmsapp01:/sas/sasuser/sas>top
            top - 09:24:24 up 155 days, 21:01, 12 users,  load average: 0.00, 0.03, 0.02
            Tasks: 453 total,   1 running, 452 sleeping,   0 stopped,   0 zombie
            Cpu(s):  0.2%us,  0.2%sy,  0.0%ni, 99.5%id,  0.0%wa,  0.0%hi,  0.0%si,  0.0%st
            Mem:  65982532k total, 49347344k used, 16635188k free,   987724k buffers
            Swap: 67108856k total,   132432k used, 66976424k free, 26697296k cached

              PID USER      PR  NI  VIRT  RES  SHR S %CPU %MEM    TIME+  COMMAND
            15177 sas       20   0 11.2g 1.7g  13m S  1.7  2.7 281:19.30 java
             3335 sas       20   0 9802m 1.2g  14m S  1.3  1.9 277:27.85 java
             .....

    전체 66G 메모리 중에 49.3G 정도 사용하고 있는 것으로 나온다.

        <app02>

            matcmsapp02:/sas/sasuser/sas>top
            top - 09:24:25 up 155 days, 21:00,  8 users,  load average: 2.97, 2.06, 1.86
            Tasks: 429 total,   1 running, 428 sleeping,   0 stopped,   0 zombie
            Cpu(s): 10.7%us,  0.2%sy,  0.0%ni, 89.1%id,  0.0%wa,  0.0%hi,  0.0%si,  0.0%st
            Mem:  65982532k total, 65484132k used,   498400k free,  1031444k buffers
            Swap: 67108856k total,    70456k used, 67038400k free, 42926300k cached

              PID USER      PR  NI  VIRT  RES  SHR S %CPU %MEM    TIME+  COMMAND
            30007 sas       20   0 3697m 479m  16m S 112.2  0.7  32380:55 java
            17486 sas       20   0 3697m 480m  16m S 54.4  0.7  15844:03 java
            19976 sas       20   0 13.9g 5.5g  26m S  1.7  8.7 505:48.91 java
            .....

    전체 66G 메모리 중에 65.4G 정도 사용하고 있는 것으로 나온다.

    메모리가 부족한 것인다.
    한마디로 그렇지 한다. 이는 리눅스의 OS cache 때문이다. 리눅스는 가용메모리 전체를 OS cache로 사용한다.
    평상시에는 Disk Block에 대한 cashe로 사용하고, 대신 언제든지 가용 메모리로 할당할 수 있도록 준비한다.
    OS cache를 포함하여 그리고 임시 버퍼등의 메모리 사이즈는 가용 메모리로 봐야한다.

        실제 가용 메모리 = mem_free + mem_cache + mem_buffer

    buffers, cache 영역까지 감안한 실제 메모리 사용량을 free명령어를 통해서 확인할 수 있다.

        <app01>
            matcmsapp01:/sas/sasuser/sas>free -m -s 10
                         total       used       free     shared    buffers     cached
            Mem:         64436      48193      16242          0        964      26071
            -/+ buffers/cache:      21156      43279
            Swap:        65535        129      65406

    현재 64.436G 메모리 중에 21.156G 실제 사용중이고, 43.279G가 언제든지 할당 가능한 가용 메모리다.

        <app02>
            matcmsapp02:/sas/sasuser/sas>free -m -s 10
                         total       used       free     shared    buffers     cached
            Mem:         64436      63949        486          0       1007      41920
            -/+ buffers/cache:      21021      43414
            Swap:        65535         68      65467


    현재 64.436G 메모리 중에 21.021G 실제 사용중이고, 43.414G가 언제든지 할당 가능한 가용 메모리다.

----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------

Git 브랜치 배우기 : http://git-scm.com/book/ko/v2

Git 간편 안내서   : http://rogerdudler.github.io/git-guide/index.ko.html

Git BOOK          : http://git-scm.com/book/ko/v2

Git 작업 흐름     : http://dalinaum-kr.tumblr.com/post/15516936704/git-work-flow

Git Tutorial      : http://www.dreamy.pe.kr/zbxe/CodeClip/95408

Eclipse + Git     : http://git-scm.com/ : [Try Git]   http://git-scm.com/doc      http://git-scm.com/docs

                    http://zzznara2.tistory.com/396    http://miffy7777.blog.me/220306795158

                    http://forum.falinux.com/zbxe/index.php?document_srl=625195&mid=lecture_tip
                    http://forum.falinux.com/zbxe/index.php?document_srl=627996&mid=lecture_tip

                    http://www.vogella.com/tutorials/EclipseGit/article.html


Groovy 시작입문   : http://www.slideshare.net/meadunhansa/groovy-42475432

                    http://www.slideshare.net/SukjinYun1/start-groovy

----------------------------------------------------------------------------------------------------

    Site           : https://github.com/

    Account        : grtlinux / [PWD]

    Git Repository : https://github.com/grtlinux/First.git

----------------------------------------------------------------------------------------------------
[ Git ]

Git에 관련된 기본적인 개념 설명은 다음 사이트들에 잘 정리되어 있으니 참고하도록 합니다.

- http://rogerdudler.github.io/git-guide/index.ko.html
- http://maskkwon.tistory.com/129

여기에서 다루는 Git 사용법은 원격으로 Git을 관리하는 서버가 존재하고 이 원격 서버로부터 파일을 주고받는 구조입니다. 원격 저장소를 생성하고 관리하는 것을 먼저 다루고 이 원격 저장소로부터 파일을 push, pull을 하는 로컬 저장소를 다루도록 하겠습니다.


0. 사용자 등록
 사용자 등록이라고 해서 회원가입과 같은 거창한 것은 아니고, push를 할 때 어떤 사람이 push를 했는지 확인하기 용이하게 하기 위해 user의 정보를 등록하는 것 뿐입니다. 로컬에서 다음과 같은 명령어를 통해 유저 정보를 등록해줍니다.
 $git config --global user.name "유저의 이름"
 $git config --global user.email "유저의@이메.일"



1. Git 원격 저장소 만들기

 서버에 접속을 해서 원격 저장소로 사용할 폴더를 만들어주고 해당 폴더로 이동합니다.
 예)
 $mkdir GitServer.git
 $cd GitServer.git
 폴더명 뒤에는 관습적으로 .git을 붙여줍니다. 이렇게 이동한 폴더에서 bare 옵션을 이용하여 bare repository로 초기화해줍니다.
 $git init --bare
 이 bare repository는 서버 역할을 하는 repository로서 해당 폴더에서는 git 명령어를 사용할 수 없습니다. 이렇게 생성한 repo에는 자동적으로 원격 저장소가 필요로 하는 파일과 폴더들이 생성됩니다.
 이렇게 하면 원격 저장소를 만드는 것이 끝납니다. 이제 이 원격 저장소와 파일을 주고받는 로컬 저장소를 만들어 보겠습니다.



2. Git 로컬 저장소 만들기

 저장소로 만들 폴더로 이동을 하고 아래와 같은 명령어를 입력합니다. 저장소로 만들 폴더 안에 프로젝트 파일이 있어도 상관 없습니다.
 $git init
 이 과정을 거치면 해당 폴더에 .git이라고 하는 숨김파일이 생성이 됩니다. 이제 해당 폴더 안에 있는 모든 파일들을 commit 가능하도록 스테이지 영역에 파일들을 추가해줍니다.
 $git add *
 이 명령어를 통해 해당 폴더 안에 있는 모든 파일들을 추가할 수 있습니다.  이렇게 스테이지 영역에 추가 된 파일들은 commit 명령어를 통해 로컬 저장소로 commit이 가능한 것입니다. 즉 프로젝트를 진행하다가 파일이 추가가 될 경우 위 명령어를 활용해서 해당 파일을 스테이지에 계속 추가를 해줘야 하는 것입니다. 이렇게 추가된 파일들은 다음과 같은 명령어로 커밋이 가능합니다.
 $git commit -m "init project"
 init project라는 메세지와 함께 로컬 저장소에 파일들을 commit 합니다. 메세지를 이용하면 해당 commit 내용이 무엇인지 추후에 확인하기 용이합니다.
 이제 로컬 저장소에 있는 파일들을 원격 저장소로 전송하는 환경을 설정하도록 하겠습니다. 로컬 저장소 폴더에서 아래와 같은 명령어를 실행합니다.
 $git remote add origin username@hostname:GitServer.git
  어느 주소로 push를 할 것인지 설정을 해 줍니다. 예를 들어, 서버 계정이 gitmanager이고 IP주소가 123.123.123.123이며 원격 저장소의 경로가 ~/repo/GitServer.git이고 80번 포트를 이용해서 접근을 해야하는 경우 다음과 같이 입력을 해 줍니다.
 예)
 $git remote add origin ssh://gitmanager@123.123.123.123:80/~/repo/GitServer.git
 프로토콜을 어떤 것을 사용하는지는 자유지만 일반적으로 Git에서는 SSH를 사용하길 권장합니다. 다른 프로토콜에 비해 push와 pull이 자유롭기 때문입니다. (그래서 일반적으로 22번 포트를 사용하지만 학교나 회사의 경우 80번 포트를 제외하고는 전부 막아 놓는 경우가 많았습니다. 그래서 외부 포트 80번과 내부 포트 22번 포트를 포워딩해서 사용하기도 합니다.)
 만일  remote를 설정하는데 값을 잘못 입력했을 경우 아래의 명령어를 통해 수정 가능합니다.
 $git remote set-url origin username@hostname:GitServer.git
 이렇게 어느 원격 저장소로 push를 할 것인지 설정도 끝났다면 원격 저장소로 파일을 보낼 준비가 끝난 것입니다. 다음과 같은 명령어를 통해 파일을 push할 수 있습니다.
 $git push origin master
 master라고 하는 이름의 branch로 파일을 push합니다. 마지막으로 파일을 pull, push를 할 branch를 설정해주면 모든 작업이 끝나게 됩니다.
 $git branch --set-upstream master origin/master
 이제 자유롭게 push, pull을 할 수 있습니다.



 3. 원격 저장소로부터 프로젝트 파일을 그대로 가져오기

 프로젝트 초기에 PL이 위와 같이 Git을 설정해주고 팀원들이 해당 프로젝트 파일을 그대로 원격에서 받아오면 위와 같은 설정을 새로 할 필요가 없습니다. 원격 저장소에 업로드 된 프로젝트 파일들을 그대로 로컬로 복사해 오는 것을 clone이라고 합니다.
 $git clone username@hostname:GitServer.git
 이렇게 명령어 한 줄로 프로젝트 파일을 원격 저장소로부터 복사해 올 수 있습니다. 프로젝트를 복사해오면 해당 프로젝트 폴더명 그대로 새로운 폴더가 하나 생성이 되고 그 안에 프로젝트 파일이 들어있게 됩니다. (위의 예로는 GitServer라는 폴더가 생성됩니다.) git remote -v 명령어를 입력해보면 원격 저장소로 remote 경로가 설정이 되어있는 것을 확인할 수 있습니다.

 이렇게 기본적으로 git을 사용하는 방법에 대해서 알아봤습니다. 다음에는 Xcode와 연동하여 Git을 사용하는 법을 알아보겠습니다.


----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------

----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------

public class FTPDownloadFileDemo {

    public static void main(String[] args) {
        String server = "www.myserver.com";
        int port = 21;
        String user = "user";
        String pass = "pass";

        FTPClient ftpClient = new FTPClient();
        try {

            ftpClient.connect(server, port);
            ftpClient.login(user, pass);
            ftpClient.enterLocalPassiveMode();
            ftpClient.setFileType(FTP.BINARY_FILE_TYPE);

            // APPROACH #1: using retrieveFile(String, OutputStream)
            String remoteFile1 = "/test/video.mp4";
            File downloadFile1 = new File("D:/Downloads/video.mp4");
            OutputStream outputStream1 = new BufferedOutputStream(new FileOutputStream(downloadFile1));
            boolean success = ftpClient.retrieveFile(remoteFile1, outputStream1);
            outputStream1.close();

            if (success) {
                System.out.println("File #1 has been downloaded successfully.");
            }

            // APPROACH #2: using InputStream retrieveFileStream(String)
            String remoteFile2 = "/test/song.mp3";
            File downloadFile2 = new File("D:/Downloads/song.mp3");
            OutputStream outputStream2 = new BufferedOutputStream(new FileOutputStream(downloadFile2));
            InputStream inputStream = ftpClient.retrieveFileStream(remoteFile2);
            byte[] bytesArray = new byte[4096];
            int bytesRead = -1;
            while ((bytesRead = inputStream.read(bytesArray)) != -1) {
                outputStream2.write(bytesArray, 0, bytesRead);
            }

            success = ftpClient.completePendingCommand();
            if (success) {
                System.out.println("File #2 has been downloaded successfully.");
            }
            outputStream2.close();
            inputStream.close();

        } catch (IOException ex) {
            System.out.println("Error: " + ex.getMessage());
            ex.printStackTrace();
        } finally {
            try {
                if (ftpClient.isConnected()) {
                    ftpClient.logout();
                    ftpClient.disconnect();
                }
            } catch (IOException ex) {
                ex.printStackTrace();
            }
        }
    }
}


-------------------------------------------------------------------


오라클
스크립트로 Reverse Engineer 하여 Comment를 논리명으로 변경하기
1)  Tools => Reverse Engineer
    New Model Type : Logical/Physical 선택
    Toget Database : Oracle / 10.x/11.x 선택
    Next
    Reverse Engineer From : Script File 선택하여 파일 지정
2) Physical 모델 선택
   테이블 전체 선택
   테이블을 외 공간에서 마우스 오른쪽 클릭  => 메뉴 : Harden Physical Names 클릭
3) Logical 모델 선택

   Model => Domain dictionary
   Macro Toolbox 버튼 클릭
   Macros -> Attribute Macro -> %ColumnComment 선택
   Colse 버튼 클릭
   Name Inherited by Attribute : %ColumnComment 만 남기고 삭제
   OK 버튼 클릭

   Model => Attribute
   Reset 버튼 클릭
   Remove overrridden properties for : Reset all attributes in model 선택
   Select Properties to Reset : Definition 제거 / Domain Parent 제거 / Logical Data Type 제거
Logical Only 선택
   OK 버튼 클릭
4) 완료



----------------------------------------------------------------------------------------------------

[ IDEF1X <-> IE ] 모델 표기볍 변경

    Model > Model properties > Notation > IE/IDEF1X

----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------

Maven을 사용하려면 당연히 일단 설치부터 해야 한다...
아래 사이트에 가보면 Maven 다운로드 받을 수 있고 간단하게 설치하는 방법도 설명되어 있다.

http://maven.apache.org/download.html

그냥 압축 풀고 환경변수만 세팅해주면 끝난다.
제대로 설치했다면 커맨드 창에 mvn -version이란 명령이 실행되어야 한다.
윈도우즈 환경에서 실행했다면 아래와 비슷한 메세지가 출력되는 것을 볼 수 있다.

Maven version: 2.0.10
Java version: 1.6.0_06
OS name: "windows xp" version: "5.1" arch: "x86" Family: "windows"

개발툴로 이클립스를 사용한다면 이클립스에 플러그인도 하나 설치해주자..
http://m2eclipse.sonatype.org/update/

m2eclipse 말고 Q를 사용하고자 한다면 아래 플러그인을 설치하도록 하자... (어떤게 좋은지는 자기 맘~)
http://q4e.googlecode.com/svn/trunk/updatesite-iam/

설치가 끝났다.. 이제 한 번 Maven 프로젝트를 생성해보자..

Maven에서는 초간단하게 프로젝트를 만들 수 있는 템플릿을 제공하는데 아래와 같이 archetype 이란 플러그인을 사용하면 된다.
archetype에는 몇가지 goal들을 제공하는데 그 중에 create를 사용해보자.

mvn archetype:create -DgroupId=com.test.app -DartifactId=test-app

위의 명령을 실행하면 뭔가 막 다운로드 받으면서 마지막에 BUILD SUCCESSFUL 이란 글자를 확인할 수 있다.
처음 실행 시에 다운로드 받는 것들은 Remote Repository 에서 Local Repository 로 필요한 라이브러리를 복사하는 과정이다.
다음에 다시 실행하면 이미 받은 라이브러리들은 다운로드 받지 않게 된다.
그런데 실행 명령어를 자세히 살펴보면 create가 Deprecated 되었으니 generate를 사용하라고 나와있다.
친절하게 설명해주니깐 다음부터는 create 대신에 generate를 사용해주도록 하자.
아무튼 생성된 프로젝트를 살펴보면 아래와 같은 구조로 만들어져 있는 것을 볼 수 있다.

test-app
├ src
│ ├ main
│ │ └ java
│ │     └ com
│ │         └ test
│ │             └ app
│ │                 └ App.java
│ └  test
│      └ java
│          └ com
│              └ test
│                  └ app
│                      └ AppTest.java
└ pom.xml

일단 artifactId 가 루트 디렉토리로 생성되고 그 안에 아래와 같은 pom.xml 파일이 존재한다.

<project>
 <modelVersion>4.0.0</modelVersion>
 <groupId>com.test.app</groupId>
 <artifactId>test-app</artifactId>
 <packaging>jar</packaging>
 <version>1.0-SNAPSHOT</version>
 <name>Maven Quick Start Archetype</name>
 <url>http://maven.apache.org</url>
 <dependencies>
  <dependency>
   <groupId>junit</groupId>
   <artifactId>junit</artifactId>
   <version>3.8.1</version>
   <scope>test</scope>
  </dependency>
 </dependencies>
</project>

Maven에서 제공하는 기본 pom.xml 과 똑같은 형태이다.
아무튼 위에서 볼 수 있는 디렉토리 구조가 바로 Maven에서 사용하는 Standard Directory Layout 이다.
src 폴더에는 main 과 test 디렉토리가 있는데 각각의 디렉토리에 groupId 로 패키지가 만들어지고
해당 디렉토리에는 소스파일, 설정파일 등등이 위치하게 된다.
그리고 App.java 파일을 하나 생성해주는데 Hello World 프로그램이 하나 들어있다.

그렇다면 이제 컴파일을 하기 위해서 pom.xml 파일이 있는 test-app 디렉토리로 경로를 옮겨간다.
이 디렉토리가 test-app 프로젝트에서 ${basedir} 가 되고 이를 이용하여 pom.xml 에서 상수처럼 사용할 수 있다.
자세한 예는 나중에 나올 것 같으니 일단은 알아두고 넘어가자.
그렇다면 컴파일은 어떻게 해주면 될까?

mvn compile

정말 간단하다... -_-;;
제대로 했다면 아까 처럼 뭔가 다운로드 받다가 성공했다는 메세지를 볼 수 있을 것이다.
그런데 정말 잘 컴파일이 되었는지 궁금하다.
test-app 디렉토리를 잘 살펴보면 target/classes 디렉토리가 생성되어 있고 그 안에 컴파일된 파일이 있는 것을 볼 수 있다!
그런데 뭔가 좀 이상한 점이 있다...
어떻게 컴파일 하고 컴파일 한 결과를 저 디렉토리에다가 복사해놓았을까...
분명 pom.xml 에는 컴파일에 관련된 아무런 정보도 없는데...

이것이 바로 Convention Over Configuration 이다.
Maven 에서 아무런 설정을 하지 않는다면 소스 디렉토리는 src/main/java 디렉토리가 되고 타겟 디렉토리는 target/classes 가 된다.
위에서 생성된 pom.xml 에서 이런 설정들을 전혀 볼 수 없지만 비밀은 Super POM 이 가지고 있다.
모든 Maven 프로젝트는 Super POM을 상속하고 있고 따로 경로 설정을 하지 않는다면 위의 기본 설정을 사용하게 되는 것이다.
과연 어떻게 POM이 구성되는지 알아보려면 아래와 같은 명령을 사용하면 최종 POM 구조를 확인할 수 있다.

mvn help:effective-pom

위의 컴파일이 끝나면 소스 코드는 컴파일이 되지만 테스트 코드는 컴파일이 되지 않는다.
Maven은 Build Life Cycle 을 갖는데 compile 이란 goal 은 소스 코드를 컴파일 하는 역할까지만 하도록 되어 있는 것이다.
이렇게 만든 이유는 재사용이 용이하도록 하기 위해서라고 이전에 살펴본 바 있다.
그렇다면 이제 테스트 코드를 컴파일 하고 유닛 테스트를 실행해보도록 하자.

mvn test

끝이다... -_-;;
그냥 위와 같이 해주면 뭔가 다운로드가 끝나면 바로 테스트 코드 컴파일 하고 유닛 테스트까지 실행해준다.
실행 결과를 잘 살펴보면 test 를 실행시키면 compile 과 test-compile 이 먼저 실행되는 것을 볼 수 있을 것이다.
Build Life Cycle이 이렇게 실행되도록 구성되어 있기 때문이다.
(상위 레벨의 goal 을 실행하게 되면 하위 레벨의 goal 을 먼저 실행한다!!)
만약 테스트 컴파일까지만 하고 테스트를 실행하지 않고자 한다면 mvn test-compile 로 실행하면 된다.
일단 테스트를 실행하면 아래와 같이 surefile 플러그인이 담당하는 것을 확인할 수 있을 것이다.

-------------------------------------------------------
 T E S T S
-------------------------------------------------------
[surefire] Running com.test.app.AppTest
[surefire] Tests run: 1, Failures: 0, Errors: 0, Time elapsed: 0.001 sec
Results :
[surefire] Tests run: 1, Failures: 0, Errors: 0

여기서 한가지 알고 넘어가야 할 사실은 여기에도 Convention Over Configuration이 적용된다는 것이다.
surefire 플러그인은 기본적으로 다음과 같은 파일을 찾아서 테스트 코드를 실행시킨다.

**/*Test.java
**/Test*.java
**/*TestCase.java

그리고 기본적으로 다음과 같은 파일은 제외한다.

**/Abstract*Test.java
**/Abstract*TestCase.java

그냥 저런 네이밍 룰을 지키기만 하면 모든걸 편하게 할 수 있다.
이번에는 패키징과 인스톨을 알아보도록 하자.

mvn package

위와 같이 실행시켜주면 pom.xml 에 설정되어 있는 패키지로 (<packaging>jar</packaging> 라면 jar로) 만들어 준다.

mvn install

그리고 나서 위의 명령을 실행하면 Local Repository로 만들어진 jar 파일을 복사해주게 된다.

정말 초간단하게 프로젝트 하나 생성해서 컴파일, 테스트, 패키징, 인스톨까지 완료할 수 있다.
필요한 POM 설정 파일은 위에서 살펴본 pom.xml 파일이 전부이다.

Maven에서는 또 하나의 유용한 플러그인을 제공한다



위에 보는 화면은 방금 우리가 만든 프로젝트의 종합적인 정보를 보여주는 웹페이지다.
저걸 내가 작접 만든게 아니고 mvn site 명령을 실행하면 site 플러그인이 자동으로 만들어 준다.
지금까지 빌드된 내용을 삭제하고자 한다면 mvn clean 명령을 실행하면 된다.

그리고 사실 요즘에 누가 커맨드 창에서 일일이 입력하고 있을까 싶다..
Maven에서는 IntelliJ IDEA와 이클립스에서 사용할 수 있는 형태로 만들어주는 플러그인도 제공한다.

mvn eclipse:eclipse

위와 같이 실행하면 이클립스 프로젝트로 사용할 수 있도록 .project 파일과 .classpath 파일이 생성된다.
이클립스를 실행한 후에 프로젝트로 등록해서 사용하면 된다.
여기까지 간단하게 프로젝트를 생성하고 Maven을 사용하는 방법을 알아보았다.
[출처] Maven 설치 및 간단한 사용방법|작성자 죽빵에캔디



----------------------------------------------------------------------------------------------------

이번에는 Maven에서 각종 리소스 파일들을 어떻게 처리하는지 알아보도록 하자.
일단 Maven에서는 리소스 파일이 src/main/resources 디렉토리에 있으면 해당 파일들을 리소스 파일로 간주한다.
만약 해당 디렉토리에 아래와 같이 test.properties 란 파일이 있다면...

test-app
├ src
│ ├ main
│ │ ├ java
│ │ │└ com
│ │ │    └ test
│ │ │        └ app
│ │ │            └ App.java
│ │ └ resources
│ │    └ test.properties
│ └  test
│      └ java
│          └ com
│              └ test
│                  └ app
│                      └ AppTest.java
└ pom.xml

mvn complie 명령을 실행해주면 target/classes 폴더에 해당 파일이 복사되는 것을 확인할 수 있다.
만약 mvn install 명령을 실행했다면 생성된 jar 파일에는 다음과 같이 META-INF 폴더가 생성된다.

test-app-1.0-SNAPSHOT.jar
└ META-INF
    ├ maven
    │  └ com.test.app
    │      └ test-app
    │          ├ pom.properties
    │          └ pom.xml
    └ MANIFEST.MF

위의 정보는 자동으로 생성된다.
만약 MANIFEST.MF 파일을 직접 만들고 싶다면 maven-jar-plugin 을 사용하면 된다..
아래와 같이 해주면<manifestFile> 태그에 명시된 파일로 변경된다.

<build>
  <plugins>
    <plugin>
      <groupId>org.apache.maven.plugins</groupId>
      <artifactId>maven-jar-plugin</artifactId>
      <configuration>
        <archive>
          <manifestFile>META-INF/MANIFEST.MF</manifestFile>
        </archive>
      </configuration>
    </plugin>
  </plugins>
</build>

테스트 클래스패스 리소스도 src/test/resources 디렉토리에 만들어주면 된다.
일반 클래스패스 리소스와 다른 점은 하나도 없다.

자.. 이번에는 리소스 필터링에 대해서 알아보도록 하자.
Maven 에서는 리소스 파일을 동적으로 변경할 수 있는 기능을 가지고 있다.
즉 POM.xml에서 사용하고 있는 모든 속성들을 ${속성이름} 으로 리소스 파일에서 가져다 사용할 수 있다.
만약 아래와 같이 POM.xml 파일에서 filtering을 true로 설정했다면...

<project>
 <modelVersion>4.0.0</modelVersion>
 <groupId>com.test.app</groupId>
 <artifactId>test-app</artifactId>
 <packaging>jar</packaging>
 <version>1.0-SNAPSHOT</version>
 <name>test</name>
 <url>http://maven.apache.org</url>
 <dependencies>
  <dependency>
   <groupId>junit</groupId>
   <artifactId>junit</artifactId>
   <version>3.8.1</version>
   <scope>test</scope>
  </dependency>
 </dependencies>
 <build>
  <resources>
   <resource>
    <directory>src/main/resources</directory>
    <filtering>true</filtering>
   </resource>
  </resources>
 </build>
</project>

src/main/resource 디렉토리에 있는 test.properties 파일에...
project.name = ${project.name} 라고 저장하고 mvn process-resources 를 실행하면...
test.properties 파일의 내용은 project.name = test 로 변경된다.

다른 프로퍼티 파일에 있는 내용을 사용할 수도 있는데...

<build>
  <filters>
   <filter>src/main/filters/filter.properties</filter>
  </filters>
  <resources>
  <resource>
   <directory>src/main/resources</directory>
   <filtering>true</filtering>
  </resource>
  </resources>
</build>

위와 같이 설정하게 되면 filter.properties에 있는 속성도 ${속성이름} 형식으로 사용할 수 있게 된다.

POM.xml에서 직접 속성을 설정할 수도 있다.

 <properties>
  <test>
   <value>hello</value>
  </test>
  <greeting.hello>hi</greeting.hello>
 </properties>

위와 같이 설정하게 되면 ${test.value} 또는 ${greeting.hello} 속성을 사용할 수 있게 된다.

마지막으로 시스템 프로퍼티도 사용할 수가 있다.
예를 들어 java.version 이라던지 기타 등등 System 클래스에서 제공하는 프로퍼티들을 그대로 사용 가능하다.
심지어 -D 옵션으로 넘어오는 커맨드 라인 프로퍼티도 사용가능하다!!

만약 리소스 중에 위와 같은 필터링을 제외하고 싶은 리소스가 있는 경우에는 아래와 같이 설정해주면 된다.

 <build>
  <resources>
   <resource>
    <directory>src/main/resources</directory>
    <filtering>true</filtering>
    <excludes>
     <exclude>test/**</exclude>
    </excludes>
   </resource>
   <resource>
    <directory>src/main/resources</directory>
    <includes>
     <include>test/**</include>
    </includes>
   </resource>
  </resources>
 </build>

즉 필터링 시에 제외할 리소스를 <exclude> 설정을 통해 제외시키고 제외된 리소스만 따로 <include> 해주면 된다.
다소 복잡해 보일지도 모르겠지만 가만 살펴보만 아주 명시적인 방법이다.

이전에도 살펴보았지만 Maven에서는 빌드를 커스터마이징 할 수 있다.
새로운 플러그인을 추가해서 할 수도 있고 이미 추가되어 있는 플러그인에 파라미터를 설정해서 할 수도 있다.

예를 들어 자바 컴파일러로 JDK 5.0을 사용하고자 한다면 아래와 같이 설정하면 된다.

 <build>
  <plugins>
   <plugin>
    <groupId>org.apache.maven.plugins</groupId>
    <artifactId>maven-compiler-plugin</artifactId>
    <version>2.0</version>
    <configuration>
     <source>1.5</source>
     <target>1.5</target>
    </configuration>
   </plugin>
  </plugins>
 </build>

<plugin> 태그를 사용하면 되는데 <depedency>와 매우 사용방법이 유사하다.
한가지 다른 점이 있다면 <plugin>은 groupId와 version은 명시하지 않아도 된다는 것이다.
만약 groupId가 없다면 org.apache.maven.plugins 또는 org.codehaus.mojo에서 해당 groupId를 찾게 된다.
그리고 version이 없다면 가장 최신 버전으로 가져오게 된다.

플러그인에 대해 자세한 정보를 얻고자 한다면 아래 주소를 참고하도록 하자.
http://maven.apache.org/plugins

이로써 기본적인 사용 방법은 다 알아보았다.
과연 언제쯤 끝까지 다 볼 수 있을까... -_-;;
[출처] Maven Classpath Resource Management - 리소스를 관리해 보자~|작성자 죽빵에캔디



----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
[ maven jar를 Local Repository에 추가하기 ]

    개발을 진행하다보면 내부에서 사용하는 jar파일이라든지, jdbc에 관련된 jar 등.. maven repository에서
    제공하지 않는 jar파일들을 추가해야 할 경우가 생기는데

    가장 좋은 방법은 개발팀내에 중앙 repository를 만들어서 등록하고 사용하면 좋겠지만 상황이 여의치 않고
    번거롭다면..  WEB-INF/lib 폴더에 넣거나 build path로 잡아주면 된다.

    간편하게 local repository에 등록하고 사용하는 방법이 있다.
    dependecy 파일들을 아래와 같은 로컬경로에 다운로드 되어진다.

        C:\Users\Administrator\.m2\repository

        (XP) C:\Documents and Settings\사용자계정\.m2\repository

    추가하기 위해서 아래와 같은 명령어를 사용하게 된다.

        mvn install:install-file
            -Dfile=<path-to-file>         : 파일 full 경로 : 외부 repository 정보
            -DgroupId=<group-id>          : 그룹아이디
            -Dartifactid=<artifact-id>    : artifactid
            -Dversion=<version>           : 버전
            -Dpackaging=<packaging>       : jar
            -DgeneratePom=true            : true pom에 생성

        예) mvn install:install-file -Dfile=C\something.jar -DgroupId=com.test -DartifactId=first -Dversion=1.0 -Dpackaging=jar -DgeneratePom=true

    정상적으로 되었다면 아래와 같은 경로로 폴더와 파일이 생성된다.

        > dir C:\Users\Administrator\.m2\repository\com\test\first\1.0
            first-1.0.jar
            first-1.0.pom

    마찬가지로 해당정보가 pom.xml에 추가된다.

        <dependency>
            <groupId>com.test</groupId>
            <artifactId>first</artifactId>
            <version>1.0</version>
        </dependency>


//mvn install:install-file -DgroupId=kang.tain -DartifactId=commons-net            -Dversion=1.0 -Dpackaging=jar -Dfile=D:\PROJ\TEMP\SASEMARTCMS\libs\commons-net-3.3.jar
//mvn install:install-file -DgroupId=kang.tain -DartifactId=smeapi_2_7             -Dversion=1.0 -Dpackaging=jar -Dfile=D:\PROJ\TEMP\SASEMARTCMS\libs\smeapi_2_7.jar

cmd /c mvn install:install-file -DgroupId=kang.tain -DartifactId=commons-logging-adapters     -Dversion=1.0 -Dpackaging=jar -Dfile=%LIB_HOME%\commons-logging-adapters-1.1.jar
cmd /c mvn install:install-file -DgroupId=kang.tain -DartifactId=commons-logging              -Dversion=1.0 -Dpackaging=jar -Dfile=%LIB_HOME%\commons-logging-1.2.jar
cmd /c mvn install:install-file -DgroupId=kang.tain -DartifactId=ibatis                       -Dversion=1.0 -Dpackaging=jar -Dfile=%LIB_HOME%\ibatis-2.3.4.726b.jar
cmd /c mvn install:install-file -DgroupId=kang.tain -DartifactId=java-json                    -Dversion=1.0 -Dpackaging=jar -Dfile=%LIB_HOME%\java-json.jar
cmd /c mvn install:install-file -DgroupId=kang.tain -DartifactId=log4j                        -Dversion=1.0 -Dpackaging=jar -Dfile=%LIB_HOME%\log4j.jar
cmd /c mvn install:install-file -DgroupId=kang.tain -DartifactId=modules.tain                 -Dversion=1.0 -Dpackaging=jar -Dfile=%LIB_HOME%\modules.tain.0.151031.jar
cmd /c mvn install:install-file -DgroupId=kang.tain -DartifactId=sas.core                     -Dversion=1.0 -Dpackaging=jar -Dfile=%LIB_HOME%\sas.core.jar
cmd /c mvn install:install-file -DgroupId=kang.tain -DartifactId=sas.core.nls                 -Dversion=1.0 -Dpackaging=jar -Dfile=%LIB_HOME%\sas.core.nls.jar
cmd /c mvn install:install-file -DgroupId=kang.tain -DartifactId=sas.rutil                    -Dversion=1.0 -Dpackaging=jar -Dfile=%LIB_HOME%\sas.rutil.jar
cmd /c mvn install:install-file -DgroupId=kang.tain -DartifactId=sas.security.sspi            -Dversion=1.0 -Dpackaging=jar -Dfile=%LIB_HOME%\sas.security.sspi.jar
cmd /c mvn install:install-file -DgroupId=kang.tain -DartifactId=sas.servlet                  -Dversion=1.0 -Dpackaging=jar -Dfile=%LIB_HOME%\sas.servlet.jar
cmd /c mvn install:install-file -DgroupId=kang.tain -DartifactId=sas.servlet.nls              -Dversion=1.0 -Dpackaging=jar -Dfile=%LIB_HOME%\sas.servlet.nls.jar
cmd /c mvn install:install-file -DgroupId=kang.tain -DartifactId=sas.svc.connection           -Dversion=1.0 -Dpackaging=jar -Dfile=%LIB_HOME%\sas.svc.connection.jar
cmd /c mvn install:install-file -DgroupId=kang.tain -DartifactId=sas.svc.connection.nls       -Dversion=1.0 -Dpackaging=jar -Dfile=%LIB_HOME%\sas.svc.connection.nls.jar
cmd /c mvn install:install-file -DgroupId=kang.tain -DartifactId=sastpj.rutil                 -Dversion=1.0 -Dpackaging=jar -Dfile=%LIB_HOME%\sastpj.rutil.jar
cmd /c mvn install:install-file -DgroupId=kang.tain -DartifactId=scsl                         -Dversion=1.0 -Dpackaging=jar -Dfile=%LIB_HOME%\scsl.jar
cmd /c mvn install:install-file -DgroupId=kang.tain -DartifactId=tdgssconfig                  -Dversion=1.0 -Dpackaging=jar -Dfile=%LIB_HOME%\tdgssconfig.jar
cmd /c mvn install:install-file -DgroupId=kang.tain -DartifactId=terajdbc4                    -Dversion=1.0 -Dpackaging=jar -Dfile=%LIB_HOME%\terajdbc4.jar

        <!--
        <dependency><groupId>kang.tain</groupId><artifactId>commons-net</artifactId><version>1.0</version></dependency>
        <dependency><groupId>kang.tain</groupId><artifactId>smeapi_2_7</artifactId><version>1.0</version></dependency>
        -->
        <dependency><groupId>kang.tain</groupId><artifactId>commons-logging-adapters</artifactId><version>1.0</version></dependency>
        <dependency><groupId>kang.tain</groupId><artifactId>commons-logging</artifactId><version>1.0</version></dependency>
        <dependency><groupId>kang.tain</groupId><artifactId>ibatis</artifactId><version>1.0</version></dependency>
        <dependency><groupId>kang.tain</groupId><artifactId>java-json</artifactId><version>1.0</version></dependency>
        <dependency><groupId>kang.tain</groupId><artifactId>log4j</artifactId><version>1.0</version></dependency>
        <dependency><groupId>kang.tain</groupId><artifactId>modules.tain</artifactId><version>1.0</version></dependency>
        <dependency><groupId>kang.tain</groupId><artifactId>sas.core</artifactId><version>1.0</version></dependency>
        <dependency><groupId>kang.tain</groupId><artifactId>sas.core.nls</artifactId><version>1.0</version></dependency>
        <dependency><groupId>kang.tain</groupId><artifactId>sas.rutil</artifactId><version>1.0</version></dependency>
        <dependency><groupId>kang.tain</groupId><artifactId>sas.security.sspi</artifactId><version>1.0</version></dependency>
        <dependency><groupId>kang.tain</groupId><artifactId>sas.servlet</artifactId><version>1.0</version></dependency>
        <dependency><groupId>kang.tain</groupId><artifactId>sas.servlet.nls</artifactId><version>1.0</version></dependency>
        <dependency><groupId>kang.tain</groupId><artifactId>sas.svc.connection</artifactId><version>1.0</version></dependency>
        <dependency><groupId>kang.tain</groupId><artifactId>sas.svc.connection.nls</artifactId><version>1.0</version></dependency>
        <dependency><groupId>kang.tain</groupId><artifactId>sastpj.rutil</artifactId><version>1.0</version></dependency>
        <dependency><groupId>kang.tain</groupId><artifactId>scsl</artifactId><version>1.0</version></dependency>
        <dependency><groupId>kang.tain</groupId><artifactId>tdgssconfig</artifactId><version>1.0</version></dependency>
        <dependency><groupId>kang.tain</groupId><artifactId>terajdbc4</artifactId><version>1.0</version></dependency>



----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------

[ Jakarta Commons Net API ]

FTP, TFTP, SMTP, POP3, telnet, Finger, Whois, Time, Echo 등

    Commons Net 라이브러리는 다양한 프로토콜에 대한 지원을 할 수 있는 구조를 갖고 있으며, 위 목록과 같이 이미 기존에 많이 사용되는 몇몇 프로토콜에 대한 클라이언트 모듈을 제공하고 있다. 또한, 개발자가 직접 프로토콜 처리를 하지 않아도 되기 때문에 관련 모듈을 빠르게 개발할 수 있는 장점도 있다.
    Commons Net 라이브러리 설치하기
    Commons Net 라이브러리는 http://jakarta.apache.org/commons/net 에서 다운로드 받을 수 있다. 현재 버전은 1.4.1 버전으로서, 다운로드 받은 파일의 압축을 풀면 commons-net-1.4.1.jar 파일이 생성되는데, 이 파일을 클래스패스에 추가해주면 된다
    .
    Commons Net은 Jakarta ORO API를 필요로 한다. Jakarta ORO 관련 모듈은 http://jakarta.apache.org/oro/index.html 사이트에서 다운로드 받을 수 있다. 현재 Jakarta ORO의 버전은 2.0.8로서, 배포판의 압축을 풀면 jakarta-oro-2.0.8.jar 파일이 생성되는데 이 파일을 클래스패스에 추가해면 설치가 완료된다.
    Commons Net API로 FTP 파일 송수신하기
    Commons Net API는 FTP와 관련해서 다음의 두 클래스를 제공하고 있다.
    org.apache.commons.net.ftp.FTPClient
    FTP 프로토콜 처리를 위한 API를 제공한다. 서버 연결, 로그인, 파일 목록, 송수신 등의 기능을 제공한다.
    org.apache.commons.net.ftp.FTPFile
    FTP 서버의 파일 표현할 때 사용되는 클래스. 파일명, 파일크기, 위치 등에 대한 정보를 제공한다.
    이 두 클래스만 사용하면 원격지의 FTP 서버로부터 원하는 파일을 송수신 할 수 있다. FTPClient API는 FTP 프로토콜과 관련해서 로그인, 파일 목록, 경로변경 등과 관련된 기능을 제공하는 데, 이들 기능과 관련된 메소드는 다음과 같다.
    메소드  설명
    conect(Strint server, int port)
    connect(String server)  FTP 서버에 접속한다. 포트 번호를 지정할 경우 해당 포트로 접속하며, 포트 번호를 지정하지 않으면 기본 포트인 21번 포트로 접속한다.
    login(String user, String pass) 지정한 사용자와 암호를 사용하여 로그인한다.
    changeWorkingDirectory(String path) FTP 서버에서 현재 작업 디렉토리의 경로를 변경한다.
    String printWorkingDirectory()  현재 작업 디렉토리를 구한다.
    FTPFile[] listFiles()
    FTPFile[] listFiles(String path)    현재 작업 디렉토리에 있는 파일 목록을 구한다.
    경로를 지정할 경우 해당 경로의 파일 목록을 구한다.
    String[] listNames()
    FTPFile[] listFiles(String path)    현재 작업 디렉토리에 있는 파일 이름을 구한다.
    경로를 지정할 경우 해당 경로의 파일 이름을 구한다.
    makeDirectory(String path)  새로운 디렉토리를 생성한다.
    rename(String from, String to)  from에 해당하는 경로를 to로 변경한다.
    retriveFile(String remoteName, OutputStream local)  FTP 서버의 remoteName 파일을 local에 지정된 출력 스트림에 다운로드 한다. 성공적으로 완료되면 true를 리턴한다.
    InputStream retrieveFileStream(String remoteName)   FTP 서버의 remoteName 파일로부터 데이터를 읽어오는 입력 스트림을 리턴한다.
    storeFile(String remoteName, InputStream local) local 입력 스트림으로부터 데이터를 읽어와 FTP 서버에 remoteName 경로로 업로드한다. 성공적으로 파일을 업로드 하면 true를 리턴한다.
    logout()    FTP 서버에서 로그아웃한다.
    disconnect()    서버와의 연결을 종료한다.
    이 외에 몇가지 메소드가 더 존재하지만, 일단 위 메소드 정도만 사용하면 충분히 FTP 프로토콜을 사용해서 파일을 송수신 할 수 있게 된다.
    파일 다운로드
    파일을 다운로드 하기 위해서는 다음과 같은 순서로 코드를 작성하면 된다.
    FTPClient.connect(): FTP 서버에 접속한다.
    FTPClient.login(): 로그인 한다.
    FTPClient.changeWorkingDirectory(): 파일이 있는 폴더로 이동한다.
    FTPClient.retrieveFile(): 파일을 다운로드 한다.
    FTPClient.logout(): 로그아웃한다.
    FTPClient.disconnect(): 연결을 종료한다.
    이를 실제 코드로 작성하면 다음과 같다.
        FTPClient ftp = null;
        try {
            ftp = new FTPClient();
            ftp.setControlEncoding("UTF-8");

            ftp.connect("ftp.somehost");         ftp.login("user", "pass");         ftp.changeWorkingDirectory("/dbdump");

            File f = new File("d:\\dbdump", "oradump1_200605.tmp");
            FileOutputStream fos = null;
            try {
                fos = new FileOutputStream(f);
                boolean isSuccess = ftp.retrieveFile("oradump1.tmp", fos);
                if (isSuccess) {
                    // 다운로드 성공
                } else {
                    // 다운로드 실패
                }
            } catch(IOException ex) {
                System.out.println(ex.getMessage());
            } finally {
                if (fos != null) try { fos.close(); } catch(IOException ex) {}
            }
            ftp.logout();
        } catch (SocketException e) {
            System.out.println("Socket:"+e.getMessage());
        } catch (IOException e) {
            System.out.println("IO:"+e.getMessage());
        } finally {
            if (ftp != null && ftp.isConnected()) {
                try { ftp.disconnect(); } catch (IOException e) {}
            }
        }

    파일 다운로드
    파일 업로드는 파일을 다운로드 하는 것과 크게 다르지 않다. 차이점이 있다면 retrieveFile() 메소드 대신 storeFile() 메소드를 사용한다는 것 뿐이다. 파일 업로드 하는 예제 코드는 다음과 같다.
        FTPClient ftp = null;
        try {
            ftp = new FTPClient();
            ftp.setControlEncoding("UTF-8");

            ftp.connect("camp.cvnet.co.kr");
            ftp.login("uniasset", "unisise");
            ftp.changeWorkingDirectory("/dbdump");

            File uploadFile = new File("d:\\today_log.txt");
            FileInputStream fis = null;
            try {
                fis = new FileInputStream(uploadFile);
                boolean isSuccess = ftp.storeFile(uploadFile.getName(), fis);
                if (isSuccess) {
                    System.out.println("업로드 성공");
                }
            } catch(IOException ex) {
                System.out.println(ex.getMessage());
            } finally {
                if (fis != null) try { fis.close(); } catch(IOException ex) {}
            }
            ftp.logout();
        } catch (SocketException e) {
            System.out.println("Socket:"+e.getMessage());
        } catch (IOException e) {
            System.out.println("IO:"+e.getMessage());
        } finally {
            if (ftp != null && ftp.isConnected()) {
                try { ftp.disconnect(); } catch (IOException e) {}
            }
        }

    FTPFile 클래스
    FTPClient.listFiles() 메소드를 사용하면 현재 디렉토리의 파일 및 폴더 목록을 읽어올 수 있는데, 이 때 각 파일과 폴더는 FTPFile 객체로 표현된다. FTPFile 클래스는 파일 및 폴더에 대한 정보를 제공하는데, 이와 관련된 메소드는 다음과 같다.
    메소드  설명
    String getName()    파일의 이름을 구한다.
    String getSize()    파일의 크기를 구한다.
    boolean isDirectory()   폴더인 경우 true를 리턴한다.
    boolean isFile()    파일인 경우 true를 리턴한다.
    boolean isSymbolicLink()    심볼 링크인 경우 true를 리턴한다.
    String getLink()    심볼 링크인 경우 링크가 가리키는 파일의 이름을 리턴한다.
    Calendar getTimestamp() 생성날짜를 구한다.
    이 외에도 FTPFile 클래스는 파일의 소유자 및 그룹, 권한 관련 정보를 구할 수 있는 메소드를 제공하고 있다.
    결론
    본 글에서는 Jakarta Commons Net API를 사용하여 FTP 파일 업로드/다운로드 기능을 구현하는 방법을 살펴봤다. Commons Net API의 FTPClient 클래스는 개발자 대신 FTP 프로토콜을 처리해줌으로써 개발자가 빠르게 FTP 관련 기능을 구현할 수 있게 해준다는 것을 알 수 있었을 것이다. FTP 뿐만 아니라 SMTP/POP3, Telnet 등 다양한 프로토콜을 처리할 수 있는 클라이언트 모듈을 제공하고 있으므로, Commons Net을 사용하면 이들 프로토콜과 관련된 클라이언트 어플리케이션을 빠르게 개발할 수 있을 것이다.
    출처 : http://javacan.madvirus.net/main/content/read.tle?contentId=123#sectionTitleListA
    ==========================================================================================
    Commons net
    I. Commons net
    Jakarta Commons의 net은 network utility collection입니다.
    인터넷 프로토콜을 대부분지원하는 강력한 유틸리티로 사용이 쉽고 간결합니다.
    클라이언트측의 기본적인 Internet protocol을 구현함으로서 고차원적인 abstract가 아닌 기본적인 프로토콜 access가 목적이기 때문에 부분적으로 object-orient 규칙에 위배되는 사항이 있다는것을 참고적으로 알자
    Commons net이 지원하는 프로토콜은 다음과 같다
    FTP
    NNTP
    SMTP
    POP3
    Telnet
    TFTP
    Finger
    Whois
    rexec/rcmd/rlogin
    Time (rdate) and Daytime
    Echo
    Discard
    NTP/SNTP
    FTP의 경우 이전에는 sun 패키지의 FtpClient를 사용했지만 이제는 Commons net의 FTP를 사용해 봅시다
    II. 준비물~
    Commons net은 자체적으로 ORO를 사용합니다
    Jakarta ORO란 파일이름의 치환, 분할, 필터링 등을 수행하기 위한 Perl5 호환 정규식, AWK와 같은 정규식, glob 표현, 그리고 유틸리티 클래스들을 제공하는 텍스트 처리 자바 클래스들입니다
    Commons net http://jakarta.apache.org/site/downloads/downloads_commons-net.cgi
    Jakarta ORO http://jakarta.apache.org/site/downloads/downloads_oro.cgi
    참고자료
    Commons net API http://jakarta.apache.org/commons/net/apidocs/index.html
    Commons net http://jakarta.apache.org/commons/net/
    III. org.apache.commons.net.ftp 의 흐름
    sun 패키지의 FTPClient처럼 FTP여러 동작을 Commons net의 FTPClient로 구현해 보자
    다음 ① ~ ⑦까지 목록은 필수항목으로 구현되어야 합니다.
    논리적으로 보면 간단합니다 ① FTPClient 생성
    먼저 가장 중심적인 역할을 하는 FTPClient를 생성합니다
    FTPClient ftpClient = new FTPClient();
    ② FTPServer에 Connect
    서버에 연결을 합니다
    ftpClient.connect(server);
    ③ 응답이 정상적인지 확인 합니다
    응답을 받아와서
    int reply = ftpClient.getReplyCode();
    정상적인지 확인해 봅니다
    if (!FTPReply.isPositiveCompletion(reply)) {
    정상적이지 않으면 연결을 끊고 종료 합니다
    ftpClient.disconnect();

    System.out.println("FTP server refused connection.");
    } else {
    정상적이면 계속 진행 합니다
    System.out.println("Connect successful");
    ..
    }
    ④ FTP Server 로그인
    ftpClient.login(username, password);
    ⑤ 여러가지 작업을 합니다
    list, get, put...
    ⑥ FTP Server 로그아웃
    ftpClient.logout();
    ⑦ FTP Server disconnect
    ftpClient.disconnect();
    IV. 사용예제 - 목록보기
    본격적으로 FTP에 접속하여 목록을 가져오는 소스를 봅시다 FTPClient ftpClient = null;
    try {
    ftpClient = new FTPClient();
    ftpClient.setControlEncoding("euc-kr"); // 한글파일명 때문에 디폴트 인코딩을 euc-kr로 합니다
    ftpClient.connect("user.chollian.net"); // 천리안 FTP에 접속합니다
    int reply = ftpClient.getReplyCode(); // 응답코드가 비정상이면 종료합니다
    if (!FTPReply.isPositiveCompletion(reply)) {
    ftpClient.disconnect();
    System.out.println("FTP server refused connection.");
    } else {

    System.out.print(ftpClient.getReplyString()); // 응답 메세지를 찍어봅시다
    ftpClient.setSoTimeout(10000); // 현재 커넥션 timeout을 millisecond 값으로 입력합니다
    ftpClient.login(username, password); // 로그인 유저명과 비밀번호를 입력 합니다
    // 목록보기 구현
    FTPFile[] ftpfiles = ftpClient.listFiles("/public"); // public 폴더의 모든 파일을 list 합니다
    if (ftpfiles != null) {
    for (int i = 0; i < ftpfiles.length; i++) {
    FTPFile file = ftpfiles[i];
    System.out.println(file.toString()); // file.getName(), file.getSize() 등등..
    }
    }
    ftpClient.logout();
    }
    } catch (Exception e) {
    System.out.println(e);
    e.printStackTrace();
    } finally {
    if (ftpClient != null && ftpClient.isConnected()) {
    try {
    ftpClient.disconnect();
    } catch (IOException ioe) {
    ioe.printStackTrace();
    }
    }
    목록보기 방법에는 한가지 방법이 더 있습니다
    위의 코드는 해당 디렉토리내의 모든 파일을 가져오는 방법이며 다음 방법은 해당 디렉토리의 모든 파일을 정해진 수로 짤라 가져오는 방법이 있습니다.
    위의 빨간색 코드대신 다음 코드가 들어갈 수 있습니다.
    int page = 1;
    FTPListParseEngine engine = ftpClient.initiateListParsing("/public"); // 목록을 나타낼 디렉토리
    while (engine.hasNext()) {
    FTPFile[] ftpfiles = engine.getNext(10); // 10개 단위로 끊어서 가져온다

    System.out.println("------------------------ "+page+" ------------------------");
    if (ftpfiles != null) {
    for (int i = 0; i < ftpfiles.length; i++) {
    FTPFile file = ftpfiles[i];
    System.out.println(file.toString());
    }
    }
    System.out.println("------------------------ "+(page++)+" -------------------------");
    }
    V. 사용예제 - get (파일 다운로드)
    서버의 /public/테스트.txt 파일을 클라이언트의 C:\\Test\\테스트.txt 에 다운받는 예제 File get_file = new File("C:\\Test\\테스트.txt");
    OutputStream outputStream = new FileOutputStream(get_file);
    boolean result = ftpClient.retrieveFile("/public/테스트.txt", outputStream);
    outputStream.close();
    VI. 사용예제 - put(파일 업로드)
    클라이언트의 C:\\Test\\보내자.txt 파일을 서버의 /public/보내자.txt 에 업로드하는 예제
    만일 서버에 이미 /public/보내자.txt 파일이 있다면 덮어쓰게 된다 File put_file = new File("C:\\Test\\보내자.txt");
    inputStream = new FileInputStream(put_file);
    boolean result = ftpClient.storeFile("/public/보내자.txt", inputStream);
    inputStream.close();
    VII. 사용예제 - append (파일업로드)
    위의 예제와 같은 기능을 하지만 이미 파일에 동일한 파일이 있으면 false를 반환하면서 실행하지 않는다 File append_file = new File("C:\\Test\\더해라.txt");
    inputStream = new FileInputStream(append_file);
    boolean result = ftpClient.appendFile("/public/더해라.txt", inputStream);
    inputStream.close();
    VIII. 사용예제 - rename (파일 이름변경)
    변경전 파일명과 변경할 파일명을 파라미터로 준다 boolean result = ftpClient.rename("/public/바꾸기전파일.txt", "/public/바꾼후파일.txt");
    IX. 사용예제 - delete (파일삭제)
    삭제할 파일을 선택한다 boolean result = ftpClient.deleteFile("/public/test.txt");
    X. 사용예제 - directory 생성
    /public 에 oops 디렉토리를 생성한다 boolean result = ftpClient.makeDirectory("/public/oops");
    XI. 사용예제 - OS 커맨드 입력하기
    /public 에 oops 디렉토리를 생성한다 ftpClient.sendCommand(FTPCommand.MAKE_DIRECTORY, "/public/oops");
    sendCommand 함수에 FTPCommand의 실행할 OS명령을 static 멤버변수를 넘겨준다
    XII. 사용예제 - 작업디렉토리 설정하기
    작업디렉토리를 /public 설정한 후 oops 디렉토리를 설정한다 (위의 예제와 비교해보라!) ftpClient.changeWorkingDirectory("/public");
    boolean result = ftpClient.makeDirectory("oops"); // /public/oops 절대경로를 적지 않아도 된다
    XIII. 사용예제 - 파일 및 전송형태 설정
    파일 형태 설정 ftpClient.setFileType(FTP.BINARY_FILE_TYPE);
    파일 타입
    FTP.BINARY_FILE_TYPE, FTP.ASCII_FILE_TYPE, FTP.EBCDIC_FILE_TYPE, FTP.IMAGE_FILE_TYPE , FTP.LOCAL_FILE_TYPE
    이 값을 설정하지 않으면 디폴트는 ASCII 이다
    전송 형태 설정 ftpClient.setFileTransferMode(FTP.STREAM_TRANSFER_MODE);
    전송 타입
    FTP.BLOCK_TRANSFER_MODE, FTP.COMPRESSED_TRANSFER_MODE
    이값을 설정하지 않으면 디폴트는 FTP.STREAM_TRANSFER_MODE 이다
    XIV. FTP접속시 글목록이 보이지 않는경우 아래 URL을 참고하세요
    Jakarta Commons Net 에서 FTP 사용시 목록이 안보일 경우
    http://www.jakartaproject.com/article/jakarta/1132032615162
    목록이 안보일 경우 해결기 I탄
    http://www.jakartaproject.com/article/jakarta/1135307924491
    테스트한 파일을 첨부합니다 ^^

----------------------------------------------------------------------------------------------------
[ tain.kr.test ]

    1. WAS
        import tain.kr.test.ftp.v01.FtpReceiver
        import tain.kr.test.ftp.v01.FtpTransfer

    2. was/bin/realenv.sh
        tain.kr.test.realsystem.v01.RealSystem

    3.




----------------------------------------------------------------------------------------------------
[ maven ]

    1. http://www.sonatype.com/books/mvnex-book/reference/public-book.html
    2. http://www.slideshare.net/MikeEnsor/maven-3-overview-15845337
    3. http://www.slideshare.net/leefs/maven-7839125
    4. http://www.slideshare.net/croeder6000/maven-7847270




----------------------------------------------------------------------------------------------------
/*
    오라클 스크립트로 Reverse Engineer 하여 Comment를 논리명으로 변경하기

    1)  Tools => Reverse Engineer
        New Model Type : Logical/Physical 선택
        Toget Database : Oracle / 10.x/11.x 선택
        Next
        Reverse Engineer From : Script File 선택하여 파일 지정

    2) Physical 모델 선택

        테이블 전체 선택
        테이블을 외 공간에서 마우스 오른쪽 클릭  => 메뉴 : Harden Physical Names 클릭

    3) Logical 모델 선택

        Model => Domain dictionary
        Macro Toolbox 버튼 클릭
        Macros -> Attribute Macro -> %ColumnComment 선택
        Colse 버튼 클릭
        Name Inherited by Attribute : %ColumnComment 만 남기고 삭제
        OK 버튼 클릭

        Model => Attribute
        Reset 버튼 클릭
        Remove overrridden properties for : Reset all attributes in model 선택
        Select Properties to Reset : Definition 제거 / Domain Parent 제거 / Logical Data Type 제거

        Logical Only 선택
        OK 버튼 클릭

    4) 완료

*/



----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------

[ Maven DOS 창에서 실행시 HttpServlet symbol 에러 발생시 처리방법 pom.xml 위에 추가한다. ]

    <dependencies>
        <dependency>
            <groupId>javax.servlet</groupId>
            <artifactId>javax.servlet-api</artifactId>
            <version>3.1.0</version>
            <scope>compile</scope>
        </dependency>
    </dependencies>

----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------

//mvn install:install-file -DgroupId=kang.tain -DartifactId=commons-net            -Dversion=1.0 -Dpackaging=jar -Dfile=D:\PROJ\TEMP\SASEMARTCMS\libs\commons-net-3.3.jar
//mvn install:install-file -DgroupId=kang.tain -DartifactId=smeapi_2_7             -Dversion=1.0 -Dpackaging=jar -Dfile=D:\PROJ\TEMP\SASEMARTCMS\libs\smeapi_2_7.jar

mvn install:install-file -DgroupId=kang.tain -DartifactId=ibatis                 -Dversion=1.0 -Dpackaging=jar -Dfile=D:\PROJ\TEMP\SASEMARTCMS\libs\ibatis-2.3.4.726b.jar
mvn install:install-file -DgroupId=kang.tain -DartifactId=java-json              -Dversion=1.0 -Dpackaging=jar -Dfile=D:\PROJ\TEMP\SASEMARTCMS\libs\java-json.jar
mvn install:install-file -DgroupId=kang.tain -DartifactId=log4j                  -Dversion=1.0 -Dpackaging=jar -Dfile=D:\PROJ\TEMP\SASEMARTCMS\libs\log4j.jar
mvn install:install-file -DgroupId=kang.tain -DartifactId=modules.tain           -Dversion=1.0 -Dpackaging=jar -Dfile=D:\PROJ\TEMP\SASEMARTCMS\libs\modules.tain.0.151031.jar
mvn install:install-file -DgroupId=kang.tain -DartifactId=sas.core               -Dversion=1.0 -Dpackaging=jar -Dfile=D:\PROJ\TEMP\SASEMARTCMS\libs\sas.core.jar
mvn install:install-file -DgroupId=kang.tain -DartifactId=sas.core.nls           -Dversion=1.0 -Dpackaging=jar -Dfile=D:\PROJ\TEMP\SASEMARTCMS\libs\sas.core.nls.jar
mvn install:install-file -DgroupId=kang.tain -DartifactId=sas.rutil              -Dversion=1.0 -Dpackaging=jar -Dfile=D:\PROJ\TEMP\SASEMARTCMS\libs\sas.rutil.jar
mvn install:install-file -DgroupId=kang.tain -DartifactId=sas.security.sspi      -Dversion=1.0 -Dpackaging=jar -Dfile=D:\PROJ\TEMP\SASEMARTCMS\libs\sas.security.sspi.jar
mvn install:install-file -DgroupId=kang.tain -DartifactId=sas.servlet            -Dversion=1.0 -Dpackaging=jar -Dfile=D:\PROJ\TEMP\SASEMARTCMS\libs\sas.servlet.jar
mvn install:install-file -DgroupId=kang.tain -DartifactId=sas.servlet.nls        -Dversion=1.0 -Dpackaging=jar -Dfile=D:\PROJ\TEMP\SASEMARTCMS\libs\sas.servlet.nls.jar
mvn install:install-file -DgroupId=kang.tain -DartifactId=sas.svc.connection     -Dversion=1.0 -Dpackaging=jar -Dfile=D:\PROJ\TEMP\SASEMARTCMS\libs\sas.svc.connection.jar
mvn install:install-file -DgroupId=kang.tain -DartifactId=sas.svc.connection.nls -Dversion=1.0 -Dpackaging=jar -Dfile=D:\PROJ\TEMP\SASEMARTCMS\libs\sas.svc.connection.nls.jar
mvn install:install-file -DgroupId=kang.tain -DartifactId=sastpj.rutil           -Dversion=1.0 -Dpackaging=jar -Dfile=D:\PROJ\TEMP\SASEMARTCMS\libs\sastpj.rutil.jar
mvn install:install-file -DgroupId=kang.tain -DartifactId=scsl                   -Dversion=1.0 -Dpackaging=jar -Dfile=D:\PROJ\TEMP\SASEMARTCMS\libs\scsl.jar
mvn install:install-file -DgroupId=kang.tain -DartifactId=tdgssconfig            -Dversion=1.0 -Dpackaging=jar -Dfile=D:\PROJ\TEMP\SASEMARTCMS\libs\tdgssconfig.jar
mvn install:install-file -DgroupId=kang.tain -DartifactId=terajdbc4              -Dversion=1.0 -Dpackaging=jar -Dfile=D:\PROJ\TEMP\SASEMARTCMS\libs\terajdbc4.jar

        <!--
        <dependency><groupId>kang.tain</groupId><artifactId>commons-net</artifactId><version>1.0</version></dependency>
        <dependency><groupId>kang.tain</groupId><artifactId>smeapi_2_7</artifactId><version>1.0</version></dependency>
        -->
        <dependency><groupId>kang.tain</groupId><artifactId>ibatis</artifactId><version>1.0</version></dependency>
        <dependency><groupId>kang.tain</groupId><artifactId>java-json</artifactId><version>1.0</version></dependency>
        <dependency><groupId>kang.tain</groupId><artifactId>log4j</artifactId><version>1.0</version></dependency>
        <dependency><groupId>kang.tain</groupId><artifactId>modules.tain</artifactId><version>1.0</version></dependency>
        <dependency><groupId>kang.tain</groupId><artifactId>sas.core</artifactId><version>1.0</version></dependency>
        <dependency><groupId>kang.tain</groupId><artifactId>sas.core.nls</artifactId><version>1.0</version></dependency>
        <dependency><groupId>kang.tain</groupId><artifactId>sas.rutil</artifactId><version>1.0</version></dependency>
        <dependency><groupId>kang.tain</groupId><artifactId>sas.security.sspi</artifactId><version>1.0</version></dependency>
        <dependency><groupId>kang.tain</groupId><artifactId>sas.servlet</artifactId><version>1.0</version></dependency>
        <dependency><groupId>kang.tain</groupId><artifactId>sas.servlet.nls</artifactId><version>1.0</version></dependency>
        <dependency><groupId>kang.tain</groupId><artifactId>sas.svc.connection</artifactId><version>1.0</version></dependency>
        <dependency><groupId>kang.tain</groupId><artifactId>sas.svc.connection.nls</artifactId><version>1.0</version></dependency>
        <dependency><groupId>kang.tain</groupId><artifactId>sastpj.rutil</artifactId><version>1.0</version></dependency>
        <dependency><groupId>kang.tain</groupId><artifactId>scsl</artifactId><version>1.0</version></dependency>
        <dependency><groupId>kang.tain</groupId><artifactId>tdgssconfig</artifactId><version>1.0</version></dependency>
        <dependency><groupId>kang.tain</groupId><artifactId>terajdbc4</artifactId><version>1.0</version></dependency>


----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------

ibatis를 쓰다보면 쿼리를 out으로 출력하고 싶을때가 많지요
일단 file로 생성하는건 추후에 포스팅 하고, 로컬에서 console에 찍는방법을 정리하겠습니다.

WEB-INF/lib/log4.jar
WEB-INF/classes/log4j.properties

    # Global logging configuration
    # 에러가 발생했을시 출력
    log4j.rootLogger=ERROR, stdout

    # SqlMap logging configuration
    # 쿼리를 출력하고 싶으므로, DEBUG레벨로 설정
    log4j.logger.java.sql.Connection=DEBUG
    log4j.logger.java.sql.Statement=DEBUG
    log4j.logger.java.sql.PreparedStatement=DEBUG
    # 쿼리가 이중으로 출력되므로, false처리
    log4j.additivity.java.sql.Connection=false

    # Console output
    log4j.appender.stdout=org.apache.log4j.ConsoleAppender
    log4j.appender.stdout.Append=false
    log4j.appender.stdout.layout=org.apache.log4j.PatternLayout
    log4j.appender.stdout.layout.ConversionPattern=%5p ({%t} %F[%M]:%L) [%d] - %m%n

web.xml에
    <param-value>
        /WEB-INF/classes/log4j.properties
    </param-value>

추가하면 끝입니다.


파일에 출력할 로그 레벨을 지정
    log4j.appender.file.Threshold=DEBUG


----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
[ SVN Subversion ]

	Windows : Setup-Subversion-1.6.6.msi
	
	Install Path : C:\Program Files (x86)\Subversion
	
	시스템 환경변수 : Path=%Path%;C:\Program Files (x86)\Subversion\bin;


----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------

[ 개발PC 환경 ]

1. Host Name : 강석 : 172.30.201.137 / ~.0 / ~.254 / 203.239.57.140, 220.64.16.140

2. ibridge
	AP
		bdt
		com
		ib2
		lib
		ram
		shl
		utl
		webCash
		webserver
	FEP
		com
		ib2
		lib
		ram
		shl
		utl
		vela
		webserver

3. 작업공간

	D:/_KANG / KANG_20160215
	
		KANG_SVN
		
		L_subst

4. 배치 FEPID : POS51   <-- KFT51(금결원 일괄전송) 참조

	bfs   bis   bxs
	bfr   bir   bxr




----------------------------------------------------------------------------------------------------

[ 영업 환경 ]

1. Host Name : 주원장 : 172.21.203.157 / ~.0.0 / ~.155.254 / 203.239.57.140, 220.64.16.140

2. 영업

	C:/IB_WebCash : ftp 및 자료
	
	D:/_KANG / KANG160216

		KANG_SVN
		
		L_drive

3. SVN


----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
